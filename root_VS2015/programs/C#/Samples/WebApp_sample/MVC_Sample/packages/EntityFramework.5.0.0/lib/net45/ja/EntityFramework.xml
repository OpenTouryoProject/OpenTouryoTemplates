<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>データベースが存在しない場合のみ、データベースの再作成および必要に応じてデータの再シードを行う <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> の実装。データベースをシードするには、派生クラスを作成し、Seed メソッドをオーバーライドします。</summary>
      <typeparam name="TContext">コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>オーバーライドした場合、シードのデータをコンテキストに追加します。既定の実装では、何も行われません。</summary>
      <param name="context">シードするコンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>このクラスのインスタンスは、<see cref="T:System.Data.Entity.DbContext" /> オブジェクトから取得され、<see cref="T:System.Data.Entity.DbContext" /> または接続をサポートする実際のデータベースの管理に使用できます。管理には、データベースの作成、削除、存在の確認が含まれます。データベースの削除および存在の確認は、このクラスの静的メソッドを使用すると、(完全なコンテキストなしに) 接続のみを使用して実行できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>このメソッドは、コンテキストにモデル ハッシュがあり、データベースにもモデル ハッシュが格納されていて、これらのハッシュが一致している場合に、true を返します。これは、データベースの作成に使用されたモデルが現在のモデルと同じなので、これら 2 つを一緒に使用できることを示しています。</summary>
      <returns>コンテキスト内とデータベース内のモデル ハッシュが一致した場合は true、それ以外の場合は false。</returns>
      <param name="throwIfNoMetadata">true に設定すると、コンテキストに関連付けられたモデルまたはデータベース自体にモデル メタデータが見つからない場合に例外がスローされます。false に設定すると、メタデータが見つからない場合にこのメソッドが true を返します。</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>このコンテキストで使用されている接続を返します。これによってコンテキストが初期化されることがあります。まだ接続が存在しない場合は、接続が作成されることがあります。</summary>
      <returns>このコンテキストで使用されている接続。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>バッキング コンテキストで定義されたモデルに対し、データベース サーバー上に新しいデータベースを作成します。データベースの初期化方法が実行される前にこのメソッドを呼び出すと、初期化方法の実行が無効になります。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>同じ名前のデータベースがサーバー上に存在しない場合に限り、バッキング コンテキストで定義されたモデルに対し、データベース サーバー上に新しいデータベースを作成します。</summary>
      <returns>データベースが存在しないため作成された場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>データベース名または接続文字列のみから <see cref="T:System.Data.Common.DbConnection" /> を作成する際に使用する接続ファクトリ。</summary>
      <returns>使用する接続ファクトリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>データベースが存在する場合は、データベース サーバー上のデータベースを削除し、それ以外の場合は何も行われません。</summary>
      <returns>データベースが存在していたが削除された場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>データベースが存在する場合は、データベース サーバー上のデータベースを削除し、それ以外の場合は何も行われません。</summary>
      <returns>データベースが存在していたが削除された場合は true、それ以外の場合は false。</returns>
      <param name="existingConnection">データベースへの既存の接続。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>データベースが存在する場合は、データベース サーバー上のデータベースを削除し、それ以外の場合は何も行われません。<see cref="T:System.Data.Entity.DbContext" /> クラスのドキュメントで説明されているのと同じ方法で、指定したデータベース名または接続文字列を使用してデータベースへの接続が作成されます。</summary>
      <returns>データベースが存在していたが削除された場合は true、それ以外の場合は false。</returns>
      <param name="nameOrConnectionString">データベース名またはデータベースへの接続文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>指定したデータベースが現在のデータベースと等しいかどうかを示す値を返します。</summary>
      <returns>指定したデータベースが現在のデータベースと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するデータベース。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>データベースに対して指定した DDL/DML コマンドを実行します。</summary>
      <returns>コマンド実行後にデータベースによって返される結果。</returns>
      <param name="sql">コマンド文字列。</param>
      <param name="parameters">コマンド文字列に適用するパラメーター。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>サーバー上にデータベースが存在するかどうかを確認します。</summary>
      <returns>データベースが存在する場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>サーバー上にデータベースが存在するかどうかを確認します。</summary>
      <returns>データベースが存在する場合は true、それ以外の場合は false。</returns>
      <param name="existingConnection">データベースへの既存の接続。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>サーバー上にデータベースが存在するかどうかを確認します。<see cref="T:System.Data.Entity.DbContext" /> クラスのドキュメントで説明されているのと同じ方法で、指定したデータベース名または接続文字列を使用してデータベースへの接続が作成されます。</summary>
      <returns>データベースが存在する場合は true、それ以外の場合は false。</returns>
      <param name="nameOrConnectionString">データベース名またはデータベースへの接続文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>指定したデータベースのハッシュ関数を返します。</summary>
      <returns>指定したデータベースのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>現在のデータベースの型を取得します。</summary>
      <returns>現在のデータベースの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>このコンテキストで、登録された <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> を実行します。パラメーター <paramref name="force" /> を true に設定すると、以前に実行したことがあるかどうかに関係なく、初期化子が実行されます。これは、アプリケーションの実行中にデータベースが削除され、初期化が必要になった場合に役立ちます。</summary>
      <param name="force">true に設定すると、初期化子を既に実行済みの場合でも再度実行されます。</param>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>データベースの初期化方法を取得または設定します。データベースの初期化方法は、<see cref="T:System.Data.Entity.DbContext" /> インスタンスが <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> から初期化されるときに呼び出されます。</summary>
      <param name="strategy">方法。</param>
      <typeparam name="TContext">コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>指定したジェネリック型の要素を返す生の SQL クエリを作成します。型は、クエリから返される列の名前に一致するプロパティを持つ任意の型、または単純なプリミティブ型を指定できます。</summary>
      <returns>列挙されたときにクエリを実行する <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクト。</returns>
      <param name="sql">SQL クエリ文字列。</param>
      <param name="parameters">SQL クエリ文字列に適用するパラメーター。</param>
      <typeparam name="TElement">クエリによって返されるオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>指定した型の要素を返す生の SQL クエリを作成します。型は、クエリから返される列の名前に一致するプロパティを持つ任意の型、または単純なプリミティブ型を指定できます。</summary>
      <returns>列挙されたときにクエリを実行する <see cref="T:System.Collections.IEnumerable" /> オブジェクト。</returns>
      <param name="elementType">クエリによって返されるオブジェクトの型。</param>
      <param name="sql">SQL クエリ文字列。</param>
      <param name="parameters">SQL クエリ文字列に適用するパラメーター。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>データベースの文字列形式を返します。</summary>
      <returns>データベースの文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>エンティティ データに対してクエリを実行してそのデータをオブジェクトとして操作するための機能を提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>規約を使用して接続先のデータベースの名前を作成する新しいコンテキスト インスタンスを構築します。規約に従い、名前は派生コンテキスト クラスの完全な名前 (名前空間 + クラス名) です。これを使用して接続を作成する方法の詳細については、<see cref="T:System.Data.Entity.DbContext" /> の「解説」を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>既存の接続を使用してデータベースに接続する新しいコンテキスト インスタンスを構築します。コンテキストが破棄されても接続は破棄されません。</summary>
      <param name="existingConnection">新しいコンテキストに使用する既存の接続。</param>
      <param name="contextOwnsConnection">true に設定した場合、コンテキストが破棄されたときに接続も破棄されます。それ以外の場合は、呼び出し元が接続を破棄する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>既存の接続を使用してデータベースに接続する新しいコンテキスト インスタンスを構築し、指定されたモデルからそのインスタンスを初期化します。コンテキストが破棄されても接続は破棄されません。</summary>
      <param name="existingConnection">新しいコンテキストに使用する既存の接続。</param>
      <param name="model">このコンテキストをサポートするモデル。</param>
      <param name="contextOwnsConnection">true に設定した場合、コンテキストが破棄されたときに接続も破棄されます。それ以外の場合は、呼び出し元が接続を破棄する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>規約を使用して接続先のデータベースの名前を作成する新しいコンテキスト インスタンスを構築し、指定されたモデルからそのインスタンスを初期化します。規約に従い、名前は派生コンテキスト クラスの完全な名前 (名前空間 + クラス名) です。これを使用して接続を作成する方法の詳細については、<see cref="T:System.Data.Entity.DbContext" /> の「解説」を参照してください。</summary>
      <param name="model">このコンテキストをサポートするモデル。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
      <summary>既存の <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> を中心に新しいコンテキスト インスタンスを構築します。</summary>
      <param name="objectContext">新しいコンテキストをラップする既存の <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />。</param>
      <param name="dbContextOwnsObjectContext">true に設定した場合、<see cref="T:System.Data.Entity.DbContext" /> が破棄されたときに <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> も破棄されます。それ以外の場合は、呼び出し元が接続を破棄する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>指定された文字列を接続先のデータベースの名前または接続文字列として使用する新しいコンテキスト インスタンスを構築します。これを使用して接続を作成する方法の詳細については、<see cref="T:System.Data.Entity.DbContext" /> の「解説」を参照してください。</summary>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>指定された文字列を接続先のデータベースの名前または接続文字列として使用する新しいコンテキスト インスタンスを構築し、指定されたモデルからそのインスタンスを初期化します。これを使用して接続を作成する方法の詳細については、<see cref="T:System.Data.Entity.DbContext" /> の「解説」を参照してください。</summary>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
      <param name="model">このコンテキストをサポートするモデル。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>エンティティの変更追跡を処理するコンテキストの機能にアクセスできます。</summary>
      <returns>変更追跡を処理する機能へのアクセスに使用するオブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>コンテキストの構成オプションにアクセスできます。</summary>
      <returns>構成オブジェクトへのアクセスに使用するオブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>このコンテキストに対してデータベース インスタンスを作成します。また基になるデータベースの作成、削除、存在確認を実行できます。</summary>
      <returns>作成されたデータベース。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>保護された Dispose メソッドを呼び出します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>コンテキストを破棄します。基になる <see cref="T:System.Data.Objects.ObjectContext" /> がこのコンテキストによって作成された場合、またはこのコンテキストの作成時に所有権がこのコンテキストに渡された場合は、それも破棄されます。データベースへの接続 (<see cref="T:System.Data.Common.DbConnection" /> オブジェクト) がこのコンテキストによって作成された場合、またはこのコンテキストの作成時に所有権がこのコンテキストに渡された場合は、接続も破棄されます。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true、アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>エンティティに関する情報にアクセスし、エンティティに対してアクションを実行できる、指定されたエンティティの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> オブジェクトを取得します。</summary>
      <returns>エンティティのエントリ。</returns>
      <param name="entity">エンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>エンティティに関する情報にアクセスし、エンティティに対してアクションを実行できる、指定されたエンティティの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> オブジェクトを取得します。</summary>
      <returns>エンティティのエントリ。</returns>
      <param name="entity">エンティティ。</param>
      <typeparam name="TEntity">エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>指定したコンテキストが現在のコンテキストと同じかどうかを示す値を返します。</summary>
      <returns>指定したコンテキストが現在のコンテキストと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するコンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>指定したコンテキストのハッシュ関数を返します。</summary>
      <returns>指定したコンテキストのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>現在のコンテキストの型を取得します。</summary>
      <returns>現在のコンテキストの型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>追跡対象のエンティティを検証し、その検証結果を格納した <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> のコレクションを返します。</summary>
      <returns>無効なエンティティに対する検証結果のコレクション。コレクションが null になることはありません。また null 値または有効なエンティティの結果を格納することもできません。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>このメソッドは、派生コンテキストのモデルの初期化が完了したが、まだロックダウンされていないときに呼び出され、コンテキストの初期化に使用されます。このメソッドの既定の実装では何も行われませんが、モデルがロックダウンされる前にさらに設定できるように派生クラスでオーバーライドできます。</summary>
      <param name="modelBuilder">作成されるコンテキストのモデルを定義するビルダー。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>このコンテキストで行われたすべての変更を基になるデータベースに保存します。</summary>
      <returns>基になるデータベースに書き込まれたオブジェクト数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>指定された型の <see cref="T:System.Data.Entity.DbSet" /> を返します。これにより、コンテキストの指定されたエンティティに対して CRUD 操作を実行できるようになります。</summary>
      <returns>指定されたエンティティ型の <see cref="T:System.Data.Entity.DbSet" /> インスタンス。</returns>
      <typeparam name="TEntity">セットを返すエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>指定された型の <see cref="T:System.Data.Entity.DbSet" /> を返します。これにより、コンテキストの指定されたエンティティに対して CRUD 操作を実行できるようになります。</summary>
      <returns>指定されたエンティティ型の <see cref="T:System.Data.Entity.DbSet" />。</returns>
      <param name="entityType">セットを返す必要があるエンティティの型。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>ユーザーが追加されたエンティティと変更されたエンティティのみを検証する既定の動作をオーバーライドできるようにするための拡張ポイント。</summary>
      <returns>検証する場合は true、それ以外の場合は false。</returns>
      <param name="entityEntry">検証対象の <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> インスタンス。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>このコンテキストの基となる Entity Framework <see cref="T:System.Data.Objects.ObjectContext" /> を返します。</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectContext" /> を返します。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>コンテキストの文字列形式を返します。</summary>
      <returns>コンテキストの文字列形式。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>ユーザーがエンティティの検証をカスタマイズしたり、検証結果にフィルターをかけて除外したりできるようにするための拡張ポイント。<see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> によって呼び出されます。</summary>
      <returns>エンティティの検証結果。オーバーライドされた場合は null の可能性があります。</returns>
      <param name="entityEntry">検証対象の DbEntityEntry インスタンス。</param>
      <param name="items">カスタム検証用の追加情報が格納されたユーザー定義のディクショナリ。<see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> に渡され、<see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" /> として公開されます。このパラメーターは省略可能で、null に設定できます。</param>
    </member>
    <member name="T:System.Data.Entity.DbExtensions">
      <summary>一般的なタスクに役立つ拡張メソッドのセットを格納します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>返されるエンティティが <see cref="T:System.Data.Entity.DbContext" /> または <see cref="T:System.Data.Objects.ObjectContext" /> にキャッシュされない新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ、または NoTracking がサポートされていない場合はソース クエリ。</returns>
      <param name="source">ソース クエリ。</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>返されるエンティティが <see cref="T:System.Data.Entity.DbContext" /> または <see cref="T:System.Data.Objects.ObjectContext" /> にキャッシュされない新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ、または NoTracking がサポートされていない場合はソース クエリ。</returns>
      <param name="source">ソース クエリ。</param>
      <typeparam name="T">要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
      <returns>定義されたクエリ パスを持つ新しい IQueryable。</returns>
      <param name="source">Include を呼び出す対象のソース IQueryable。</param>
      <param name="path">クエリ結果で返す関連オブジェクトをドットで区切った一覧。</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
      <returns>定義されたクエリ パスを持つ T の新しい IQueryable。</returns>
      <param name="source">Include を呼び出す対象のソース IQueryable。</param>
      <param name="path">含めるパスを表すラムダ式。</param>
      <typeparam name="T">照会するエンティティの型。</typeparam>
      <typeparam name="TProperty">含めるナビゲーション プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
      <returns>定義されたクエリ パスを持つ T の新しい IQueryable。</returns>
      <param name="source">Include を呼び出す対象のソース IQueryable。</param>
      <param name="path">クエリ結果で返す関連オブジェクトをドットで区切った一覧。</param>
      <typeparam name="T">照会するエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
      <summary>クエリ結果を列挙する IQueryable の拡張メソッド。これは、実際に一覧を作成せずに ToList を呼び出すのと同じです。</summary>
      <param name="source">ソース クエリ。</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary> 指定された <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> との同期を維持する <see cref="T:System.ComponentModel.BindingList`1" /> の実装を返します。</summary>
      <returns>バインディング リスト。</returns>
      <param name="source">バインディング リストが同期を維持するコレクション。</param>
      <typeparam name="T">要素型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> は、データベース スキーマに CLR クラスをマップするために使用します。コード主体で Entity Data Model (EDM) モデルをビルドする方法が Code First です。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> クラスの新しいインスタンスを初期化します。初期モデルを検出するプロセスでは、使用しているコンピューターにインストールされた最新バージョンの Entity Framework に含まれている一連の規約が使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>特定のセットの規約を使用して初期モデルを検出する <see cref="T:System.Data.Entity.DbModelBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelBuilderVersion">使用する規約のバージョン。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>このビルダーを使用して実行された構成に基づいて <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> を作成します。どのデータベース プロバイダーを使用するかは、生成されるモデルのデータベース層に影響を与えるので、接続を使用してデータベース プロバイダーを特定します。</summary>
      <returns>ビルドされたモデル。</returns>
      <param name="providerConnection">プロバイダー情報の特定に使用される接続。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>このビルダーを使用して実行された構成に基づいて <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> を作成します。プロバイダー情報は生成されるモデルのデータベース層に影響を与えるので指定する必要があります。SqlClient では、不変名は 'System.Data.SqlClient' で、マニフェスト トークンはバージョン年 (たとえば、'2005'、'2008' など) です。</summary>
      <returns>ビルドされたモデル。</returns>
      <param name="providerInfo">モデルで使用されるデータベース プロバイダー。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>型を複合型としてモデルに登録し、複合型の構成に使用できるオブジェクトを返します。このメソッドを同じ型に対して複数回呼び出し、複数行の構成を実行することができます。</summary>
      <returns>指定された複合型に対する構成オブジェクト。</returns>
      <typeparam name="TComplexType">登録または構成する型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>この <see cref="T:System.Data.Entity.DbModelBuilder" /> の <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> を取得します。レジストラーを使用すると、派生エンティティ型と派生複合型の構成をこのビルダーに登録できます。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> の構成。</returns>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>規約を処理するこの <see cref="T:System.Data.Entity.DbModelBuilder" /> の設定にアクセスします。</summary>
      <returns>設定へのアクセス</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>エンティティ型をモデルの一部として登録し、エンティティの構成に使用できるオブジェクトを返します。このメソッドを同じエンティティに対して複数回呼び出し、複数行の構成を実行することができます。</summary>
      <returns>指定されたエンティティ型に対する構成オブジェクト。</returns>
      <typeparam name="TEntityType">登録または構成する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>指定したモデル ビルダーが現在のモデル ビルダーと同じかどうかを示す値を返します。</summary>
      <returns>指定したモデル ビルダーが現在のモデル ビルダーと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するモデル ビルダー。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>指定したモデル ビルダーのハッシュ関数を返します。</summary>
      <returns>指定したモデル ビルダーのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>現在のモデル ビルダーの型を取得します。</summary>
      <returns>現在のモデル ビルダーの型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>モデルから型を除外します。初期モデルの検出時に規約によって追加された型をモデルから除外するために使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.DbModelBuilder" /> インスタンス。</returns>
      <typeparam name="T">除外する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>モデルから 1 つまたは複数の型を除外します。初期モデルの検出時に規約によって追加された型をモデルから除外するために使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.DbModelBuilder" /> インスタンス。</returns>
      <param name="types">モデルから除外する型。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>モデル ビルダーの文字列形式を返します。</summary>
      <returns>モデル ビルダーの文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>この列挙体の値は、<see cref="T:System.Data.Entity.DbModelBuilder" /> クラスに直接指定することも、<see cref="T:System.Data.Entity.DbContext" /> から派生したクラスに適用される <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> で使用することもできます。使用される値は、コードからモデルを構築する場合に使用する <see cref="T:System.Data.Entity.DbContext" /> 規約と <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約のバージョンを定義します。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>最新バージョンの <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約と <see cref="T:System.Data.Entity.DbContext" /> 規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>Entity Framework v4.1 に付属するバージョンの <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約と <see cref="T:System.Data.Entity.DbContext" /> 規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>.Net Framework 4 をターゲットとする場合に Entity Framework v5.0 に付属するバージョンの <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約と <see cref="T:System.Data.Entity.DbContext" /> 規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>Entity Framework v5.0 に付属するバージョンの <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約と <see cref="T:System.Data.Entity.DbContext" /> 規約を使用することを示します。</summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>この属性は、<see cref="T:System.Data.Entity.DbContext" /> から派生したクラスに適用することによって、コードからモデルを構築する際に使用する <see cref="T:System.Data.Entity.DbContext" /> 規約および <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約のバージョンを設定できます。<see cref="T:System.Data.Entity.DbModelBuilder" /> のバージョンの詳細については、<see cref="T:System.Data.Entity.DbModelBuilderVersion" /> 列挙体のトピックを参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">使用する <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約のバージョン。</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約のバージョンを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約のバージョン。</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>作成、読み取り、更新、および削除の各操作の実行に使用されるエンティティ セットを表します。非ジェネリック バージョンの <see cref="T:System.Data.Entity.DbSet`1" />。ビルド時にエンティティの型が不明な場合に使用できます。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>
        <see cref="F:System.Data.EntityState.Added" /> 状態のコンテキストに、指定されたエンティティを追加します。変更の保存時に、Added 状態のエンティティがデータベースに挿入されます。変更が保存されると、オブジェクトの状態は <see cref="F:System.Data.EntityState.Unchanged" /> に変更されます。</summary>
      <returns>エンティティ。</returns>
      <param name="entity">追加するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>
        <see cref="F:System.Data.EntityState.Unchanged" /> 状態のコンテキストに、指定されたエンティティをアタッチします。</summary>
      <returns>エンティティ。</returns>
      <param name="entity">アタッチするエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.DbSet`1" /> オブジェクトを返します。</summary>
      <returns>ジェネリック セット オブジェクト。</returns>
      <typeparam name="TEntity">ジェネリック セット オブジェクトにキャストするオブジェクトの基本型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>このセットの型に対するエンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされません。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>エンティティ インスタンス。プロキシの場合もあります。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>このセットの型に対して、またはこのセットの型から派生する型に対して、エンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされません。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>エンティティ インスタンス。プロキシの場合もあります。</returns>
      <param name="derivedEntityType">派生エンティティ型。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>指定されたセットが現在のセットに等しいかどうかを示す値を返します。</summary>
      <returns>指定したオブジェクトが現在のセットと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するセット。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>主キー値を使用して、コンテキストによって追跡されているエンティティの検索を試みます。エンティティがコンテキスト内にない場合は、クエリが実行されてデータ ソースのデータに対して評価され、エンティティがコンテキストまたはデータ ソースで見つからない場合は null が返されます。Find は、コンテキストに追加されたがまだデータベースに保存されていないエンティティも返します。</summary>
      <returns>検索されたエンティティ、または null。</returns>
      <param name="keyValues">検索するエンティティの主キー値。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>指定されたセットのハッシュ関数を返します。</summary>
      <returns>指定されたセットのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>現在のセットの型を取得します。</summary>
      <returns>現在のセットの型。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>コンテキストによって現在追跡されており、Deleted としてマークされていないセットのエンティティを表す <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> を返します。Local プロパティにアクセスしても、クエリはデータベースに送信されません。通常、このプロパティはクエリの実行後に使用されます。</summary>
      <returns>ローカル ビュー。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>指定されたエンティティを <see cref="F:System.Data.EntityState.Deleted" /> としてマークします。変更が保存されるときに、エンティティがデータベースから削除されます。エンティティは、このメソッドが呼び出される前に、その他の状態でコンテキスト内に存在する必要があります。</summary>
      <returns>エンティティ。</returns>
      <param name="entity">削除するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>このセットにエンティティを返す生の SQL クエリを作成します。既定では、返されたエンティティは、コンテキストによって追跡されます。この動作は、このメソッドから返された <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> で AsNoTracking を呼び出して変更できます。</summary>
      <returns>列挙されたときにクエリを実行する <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> オブジェクト。</returns>
      <param name="sql">SQL クエリ文字列。</param>
      <param name="parameters">SQL クエリ文字列に適用するパラメーター。</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>作成、読み取り、更新、および削除の各操作の実行に使用される型指定されたエンティティ セットを表します。DbSet はパブリックに構築可能ではなく、<see cref="T:System.Data.Entity.DbContext" /> インスタンスからのみ作成できます。</summary>
      <typeparam name="TEntity">セットを定義する型。型は、派生型および基本型にできます。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>
        <see cref="F:System.Data.EntityState.Added" /> 状態のコンテキストに、指定されたエンティティを追加します。変更の保存時に、Added 状態のエンティティがデータベースに挿入されます。変更が保存されると、オブジェクトの状態は <see cref="F:System.Data.EntityState.Unchanged" /> に変更されます。</summary>
      <returns>
        <see cref="{0}" /> を返します。</returns>
      <param name="entity">追加するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>
        <see cref="F:System.Data.EntityState.Unchanged" /> 状態のコンテキストに、指定されたエンティティをアタッチします。</summary>
      <returns>
        <see cref="{0}" /> を返します。</returns>
      <param name="entity">アタッチするエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>このセットの型に対して、またはこのセットの型から派生する型に対して、エンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされません。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>
        <see cref="{0}" /> を返します。</returns>
      <typeparam name="TDerivedEntity">セットを定義する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>このセットの型に対するエンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされません。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>
        <see cref="{0}" /> を返します。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のセットと等しいかどうかを示す値を返します。</summary>
      <returns>指定したセットが現在のセットと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するセット。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>主キー値を使用して、コンテキストによって追跡されているエンティティの検索を試みます。エンティティがコンテキスト内にない場合は、クエリが実行されてデータ ソースのデータに対して評価され、エンティティがコンテキストまたはデータ ソースで見つからない場合は null が返されます。Find は、コンテキストに追加されたがまだデータベースに保存されていないエンティティも返します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
      <param name="keyValues">検索するエンティティの主キー値。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>指定されたセットのハッシュ関数を返します。</summary>
      <returns>指定されたセットのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>現在のセットの型を取得します。</summary>
      <returns>現在のセットの型。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>コンテキストによって現在追跡されており、Deleted としてマークされていないセットのエンティティを表す <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> を返します。Local プロパティにアクセスしても、クエリはデータベースに送信されません。通常、このプロパティはクエリの実行後に使用されます。</summary>
      <returns>ローカル ビュー。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>同等の非ジェネリック <see cref="T:System.Data.Entity.DbSet" /> を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbSet" /> 非ジェネリック セット オブジェクトを返します。</returns>
      <param name="entry">同等の非ジェネリック <see cref="T:System.Data.Entity.DbSet" /> が返されるエントリ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>指定されたエンティティを <see cref="F:System.Data.EntityState.Deleted" /> としてマークします。変更が保存されるときに、エンティティがデータベースから削除されます。エンティティは、このメソッドが呼び出される前に、その他の状態でコンテキスト内に存在する必要があります。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbSet" /> を返します。</returns>
      <param name="entity">削除するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>このセットにエンティティを返す生の SQL クエリを作成します。既定では、返されたエンティティは、コンテキストによって追跡されます。この動作は、このメソッドから返された <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> で AsNoTracking を呼び出して変更できます。</summary>
      <returns>列挙されたときにクエリを実行する <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> オブジェクト。</returns>
      <param name="sql">SQL クエリ文字列。</param>
      <param name="parameters">返されるエンティティの型は常にこのセットの型であって、派生型ではありません。照会先の 1 つまたは複数のテーブルにその他のエンティティ型のデータが格納されている場合、正しい型のエンティティだけが返されるように、適切に SQL クエリを作成する必要があります。SQL クエリ文字列に適用するパラメーター。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>アプリケーション ドメインで初めてコンテキストが使用されたときに、データベースを常に再作成し、必要に応じてデータの再シードを行う <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> の実装。データベースをシードするには、派生クラスを作成し、Seed メソッドをオーバーライドします。</summary>
      <typeparam name="TContext">コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>オーバーライドした場合、シードのデータをコンテキストに追加します。既定の実装では、何も行われません。</summary>
      <param name="context">シードするコンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>データベースの作成後にモデルが変更された場合のみ、データベースの削除、再作成、または必要に応じてデータの再シードを行う <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> の実装。これは、ストア モデルのハッシュの作成時にハッシュをデータベースに書き込み、その後、そのハッシュを現在のモデルから生成されたハッシュと比較することによって行います。データベースをシードするには、派生クラスを作成し、Seed メソッドをオーバーライドします。</summary>
      <typeparam name="TContext">コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>実際にコンテキストにデータを追加してシードするためにオーバーライドされます。既定の実装では、何も行われません。</summary>
      <param name="context">シードするコンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>データベースの初期化子のメソッドを定義します。</summary>
      <typeparam name="TContext">コンテキストの型。この型パラメーターは反変です。つまり、指定した型と、その派生元となる任意の型を使用できます。共変および反変の詳細については、「」を参照してください。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>指定された型のコンテキストにある (つまりデータベースで照会できる) すべてのエンティティのコレクションを表します。<see cref="T:System.Data.Entity.DbSet" /> は、<see cref="T:System.Data.Entity.IDbSet`1" /> の具象実装です。</summary>
      <typeparam name="TEntity">セットを定義する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>
        <see cref="F:System.Data.EntityState.Added" /> 状態のコンテキストに、指定されたエンティティを追加します。変更の保存時に、Added 状態のエンティティがデータベースに挿入されます。変更が保存されると、オブジェクトの状態は <see cref="F:System.Data.EntityState.Unchanged" /> に変更されます。</summary>
      <returns>エンティティを返します。</returns>
      <param name="entity">追加するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>
        <see cref="F:System.Data.EntityState.Unchanged" /> 状態のコンテキストに、指定されたエンティティをアタッチします。</summary>
      <returns>エンティティを返します。</returns>
      <param name="entity">アタッチするエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>このセットの型に対するエンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされません。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>エンティティ インスタンスを返します。プロキシの場合もあります。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>このセットの型に対して、またはこのセットの型から派生する型に対して、エンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされません。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>エンティティ インスタンスを返します。プロキシの場合もあります。</returns>
      <typeparam name="TDerivedEntity">作成するエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>主キー値を使用して、コンテキストによって追跡されているエンティティの検索を試みます。エンティティがコンテキスト内にない場合は、クエリが実行されてデータ ソースのデータに対して評価され、エンティティがコンテキストまたはデータ ソースで見つからない場合は null が返されます。Find は、コンテキストに追加されたがまだデータベースに保存されていないエンティティも返します。</summary>
      <returns>検出されたエンティティ、または null を返します。</returns>
      <param name="keyValues">検索するエンティティの主キー値。</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>コンテキストによって現在追跡されており、Deleted としてマークされていないセットのエンティティを表す <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> を返します。Local プロパティにアクセスしても、クエリはデータベースに送信されません。通常、このプロパティはクエリの実行後に使用されます。</summary>
      <returns>ローカル ビュー。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>指定されたエンティティを <see cref="F:System.Data.EntityState.Deleted" /> としてマークします。変更が保存されるときに、エンティティがデータベースから削除されます。エンティティは、このメソッドが呼び出される前に、その他の状態でコンテキスト内に存在する必要があります。</summary>
      <returns>エンティティを返します。</returns>
      <param name="entity">削除するエンティティ。</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Code First Migrations を使用してデータベースを最新の移行に更新する IDatabaseInitializer の実装。</summary>
      <typeparam name="TContext"></typeparam>
      <typeparam name="TMigrationsConfiguration"></typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary> MigrateDatabaseToLatestVersion クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary> 構成ファイルから取得した特定の接続文字列を使用してデータベースに接続し、移行を実行する MigrateDatabaseToLatestVersion クラスの新しいインスタンスを初期化します。</summary>
      <param name="connectionStringName">移行に使用する接続文字列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>エンティティの変更追跡に関係するコンテキストでの諸機能にアクセスを提供する <see cref="T:System.Data.Entity.DbContext" /> の ChangeTracker メソッドによって返されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>POCO エンティティのプロパティとリレーションシップに加えられた変更を検出します。エンティティの型によっては (<see cref="T:System.Data.Objects.DataClasses.EntityObject" /> から派生する変更追跡プロキシやエンティティなど)、変更が自動的に報告され、これらの型のエンティティに対するこのメソッドの呼び出しは通常必要ないことに注意してください。また、通常このメソッドは、<see cref="T:System.Data.Entity.DbContext" /> のメソッドとそれに関連するクラスによって自動的に呼び出されるので、このメソッドを明示的に呼び出す必要があるのはまれです。ただし、一般的にはパフォーマンス上の理由から、<see cref="P:System.Data.Entity.DbContext.Configuration" /> から AutoDetectChangesEnabled フラグを使ってこのメソッドの自動呼び出しをオフにした方がよい場合があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>このコンテキストで追跡されるすべてのエンティティの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> オブジェクトを取得します。</summary>
      <returns>エントリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>このコンテキストで追跡される特定の型のすべてのエンティティの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> オブジェクトを取得します。</summary>
      <returns>エントリ。</returns>
      <typeparam name="TEntity">エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>指定されたトラッカーが現在のトラッカーと同じかどうかを返します。</summary>
      <returns>指定したトラッカーが現在のトラッカーと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するトラッカー。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>指定されたトラッカーのハッシュ関数を返します。</summary>
      <returns>指定されたトラッカーのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>現在のトラッカーの型を取得します。</summary>
      <returns>現在のトラッカーの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>トラッカーの文字列表記を返します。</summary>
      <returns>トラッカーの文字列表記。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> クラスの非ジェネリック バージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TElement">コレクション要素の型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>ナビゲーション プロパティの現在の値を取得または設定します。現在の値はナビゲーション プロパティが参照するエンティティです。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>このナビゲーション プロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>このナビゲーション プロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>データベースからエンティティのコレクションが読み込まれたかどうかを示す値を取得します。</summary>
      <returns>コレクションが読み込まれた場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>データベースからエンティティのコレクションを読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>データベースからこのコレクションを読み込むために使用されるクエリを返します。返されたクエリを LINQ を使用して変更することによって、実際にエンティティを読み込まずに、フィルター処理やデータベース内のコレクション内に存在するエンティティの数を数えるなど、データベース内での操作を実行できます。</summary>
      <returns>コレクションに対するクエリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>このクラスのインスタンスは <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> の <see cref="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)" /> メソッドから返され、エンティティのコレクション ナビゲーション プロパティの読み込みなどの操作を可能にします。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TElement">エンティティ コレクション内の要素の型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>ナビゲーション プロパティの現在の値を取得または設定します。現在の値はナビゲーション プロパティが参照するエンティティです。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>このナビゲーション プロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>このナビゲーション プロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>データベースからエンティティのコレクションが読み込まれたかどうかを示す値を取得します。</summary>
      <returns>コレクションが読み込まれた場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>データベースからエンティティのコレクションを読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>このオブジェクトが表すナビゲーション プロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> を返します。</returns>
      <param name="entry">エントリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>データベースからこのコレクションを読み込むために使用されるクエリを返します。返されたクエリを LINQ を使用して変更することによって、実際にエンティティを読み込まずに、フィルター処理やデータベース内のコレクション内に存在するエンティティの数を数えるなど、データベース内での操作を実行できます。</summary>
      <returns>コレクションに対するクエリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>
        <see cref="T:System.Data.Objects.ObjectContext" /> の作成に使用できる、または <see cref="T:System.Data.Entity.DbContext" /> のコンストラクターに渡すことのできる Entity Data Model (EDM) モデルの不変表記。パフォーマンスを向上させるには、この型のインスタンスをキャッシュしてコンテキストの作成に再使用する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>
        <see cref="T:System.Data.Objects.ObjectContext" /> のインスタンスまたは ObjectContext から派生したクラスを作成します。代わりに適切な DbContext コンストラクターを使用することによって DbContext のインスタンスを作成できることに注意してください。派生 ObjectContext を使用する場合は、単独の EntityConnection パラメーターを持つパブリック コンストラクターが必要です。渡された接続は作成された ObjectContext によって使用されますが、そのコンテキストに所有されることはありません。コンテキストが破棄された後、その接続は呼び出し側で破棄する必要があります。</summary>
      <returns>コンテキストを返します。</returns>
      <param name="existingConnection">コンテキストが使用するデータベースへの既存の接続。</param>
      <typeparam name="TContext">作成するコンテキストの種類。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> クラスの非ジェネリック バージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TComplexProperty">複合プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>このプロパティの入れ子の複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>このプロパティの入れ子プロパティを表すオブジェクトを取得します。このメソッドはスカラー プロパティにも複合プロパティにも使用できます。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>このクラスのインスタンスは <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> の ComplexProperty メソッドから返され、複合プロパティへのアクセスを可能にします。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TComplexProperty">このプロパティが属するエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>このプロパティの入れ子の複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="property">入れ子プロパティを表す式。</param>
      <typeparam name="TNestedComplexProperty">入れ子プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>このプロパティの入れ子の複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>このプロパティの入れ子の複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
      <typeparam name="TNestedComplexProperty">入れ子プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>このオブジェクトが表すプロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> を返します。</returns>
      <param name="entry">エントリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>このプロパティの入れ子プロパティを表すオブジェクトを取得します。このメソッドはスカラー プロパティにも複合プロパティにも使用できます。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="property">入れ子プロパティを表す式。</param>
      <typeparam name="TNestedProperty">入れ子プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>このプロパティの入れ子プロパティを表すオブジェクトを取得します。このメソッドはスカラー プロパティにも複合プロパティにも使用できます。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
      <typeparam name="TNestedProperty">入れ子プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>このプロパティの入れ子プロパティを表すオブジェクトを取得します。このメソッドはスカラー プロパティにも複合プロパティにも使用できます。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>データベース接続に関する情報を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>アプリケーション構成ファイルで指定された接続を表す、<see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="connectionName">アプリケーション構成に含まれる接続文字列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>接続文字列に基づいて、<see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="connectionString">接続に使用する接続文字列。</param>
      <param name="providerInvariantName">接続に使用するプロバイダーの名前。SQL Server 用の "System.Data.SqlClient" を使用します。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のオブジェクトと等しいかどうかを示します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> オブジェクトに関連付けられたデータベース接続文字列の作成元を示します。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>接続文字列は規約に従って作成されました。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>接続文字列は外部構成から読み取られました。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>接続文字列は実行時に明示的に指定されました。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>     接続文字列は、DbContextInfo に提供された接続情報によってオーバーライドされました。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>コンテキストの設定オプションへのアクセスを提供するために <see cref="T:System.Data.Entity.DbContext" /> の Configuration メソッドによって返されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>構成変更の自動検出が有効になっているかどうかを取得または設定します。</summary>
      <returns>構成変更の自動検出が有効な場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>指定された構成が現在の構成と同じかどうかを返します。</summary>
      <returns>指定した構成が現在の構成と等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較する構成。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>指定された構成のハッシュ関数を返します。</summary>
      <returns>指定された構成のハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>現在の構成の型を取得します。</summary>
      <returns>現在の構成の型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>ナビゲーション プロパティとして公開されているリレーションシップの遅延読み込みが有効になっているかどうかを示す値を取得または設定します。既定では、遅延読み込みは有効になっています。</summary>
      <returns>遅延読み込みが有効な場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>エンティティ型のインスタンスが作成されるたびに、動的に生成されたプロキシ クラスのインスタンスがフレームワークによって作成されるかどうかを示す値を取得または設定します。このフラグによってプロキシの作成が有効になっていても、エンティティの型がプロキシ扱いの要件を満足しなければプロキシ インスタンスは作成されないことに注意してください。プロキシ作成は既定で有効になっています。</summary>
      <returns>プロキシ作成が有効な場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>構成の文字列表記を返します。</summary>
      <returns>構成の文字列表記。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>
        <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> が呼び出されたとき、追跡されているエンティティが自動的に検証されるかどうかを示す値を取得または設定します。既定値は true です。</summary>
      <returns>追跡されているエンティティが自動的に検証される場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>指定した <see cref="T:System.Data.Entity.DbContext" /> 型に関するランタイム情報を提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>指定した <see cref="T:System.Data.Entity.DbContext" /> 型を表す新しいインスタンスを初期化します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>指定した <see cref="T:System.Data.Entity.DbContext" /> 型を表す新しいインスタンスを初期化します。外部 config オブジェクト (app.config や web.config など) を指定できます。このオブジェクトは接続文字列の解決時に使用されます。これには、接続文字列と DefaultConnectionFactory エントリの検索が含まれます。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="config">config ファイルを表すオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>特定のデータベースを対象とする、指定した <see cref="T:System.Data.Entity.DbContext" /> を表す新しいインスタンスを初期化します。外部 config オブジェクト (app.config や web.config など) を指定できます。このオブジェクトは接続文字列の解決時に使用されます。これには、接続文字列と DefaultConnectionFactory エントリの検索が含まれます。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="config">config ファイルを表すオブジェクト。</param>
      <param name="connectionInfo">使用するデータベースの接続情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>指定した <see cref="T:System.Data.Entity.DbContext" /> 型を表す新しいインスタンスを初期化します。接続文字列の外部リストを指定できます。接続文字列の解決時に、外部構成ファイルで指定された接続文字列の代わりにこのリストが使用されます。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="connectionStringSettings">接続文字列のコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>特定のデータベースを対象とする、指定した <see cref="T:System.Data.Entity.DbContext" /> を表す新しいインスタンスを初期化します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="connectionInfo">使用するデータベースの接続情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>指定した <see cref="T:System.Data.Entity.DbContext" /> 型を表す新しいインスタンスを初期化します。基になる EDM モデルの構築時に使用される既定の決定済みプロバイダーをオーバーライドするために、<see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> オブジェクトを指定できます。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="modelProviderInfo">対象とする基になる ADO.NET プロバイダーを指定する <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> オブジェクト。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続の ADO.NET プロバイダー名を取得または設定します。</summary>
      <returns>基になる型で使用される接続の ADO.NET プロバイダー名。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列を取得または設定します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列名を取得または設定します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列名。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列の作成元を取得または設定します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列の作成元。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 具象型を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbContext" /> 具象型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>指定した <see cref="T:System.Data.Entity.DbContext" /> 型を表す新しいインスタンスを作成します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型のインスタンスを作成できる場合は、新しいインスタンスが返されます。それ以外の場合は null が返されます。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型を作成できるかどうかを示す値を取得または設定します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型を作成できる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>初期化された派生コンテキストのモデルを取得または設定します。</summary>
      <returns>初期化された派生コンテキストのモデル。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> クラスの非ジェネリック バージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>このオブジェクトが表す追跡対象エンティティのジェネリック型に対応するジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> クラスの新しいインスタンスを返します。追跡対象のエンティティ型にジェネリック型との互換性がなければ、例外がスローされます。</summary>
      <returns>ジェネリック バージョン</returns>
      <typeparam name="TEntity">エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>このエンティティから関連するエンティティのコレクションへのコレクション ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>このエンティティの複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>複合プロパティを表すオブジェクト。</returns>
      <param name="propertyName">複合プロパティの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>このオブジェクトによって表される追跡対象エンティティの現在のプロパティ値を取得します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>エンティティを取得します。</summary>
      <returns>エンティティ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>指定した <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> がこのインスタンスと等しいかどうかを判定します。2 つの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> インスタンスは、両方とも <see cref="T:System.Data.Entity.DbContext" /> 上の同じエンティティに対するエントリなら等しいと判定されます。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> がこのインスタンスと等しい場合は true、それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> がこのインスタンスと等しいかどうかを判定します。2 つの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> インスタンスは、両方とも <see cref="T:System.Data.Entity.DbContext" /> 上の同じエンティティに対するエントリなら等しいと判定されます。</summary>
      <returns>指定したオブジェクトがこのインスタンスと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>現在データベース内に存在している追跡対象エンティティの値のコピーを検索するためにデータベースをクエリします。返されたディクショナリ内の値を変更してもデータベース内の値は更新されません。データベース内にそのエンティティが見つからない場合は null が返されます。</summary>
      <returns>ストア値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。ハッシュ アルゴリズムでもハッシュ テーブルのようなデータ構造でも使用できるもの。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>現在のデータベース エンティティ エントリの型を取得します。</summary>
      <returns>現在のデータベース エンティティ エントリの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>この <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> インスタンスを検証して検証結果を返します。</summary>
      <returns>エンティティの検証結果。<see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> メソッドがオーバーライドされた場合は null の可能性があります。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>そのエンティティのメンバーを表すオブジェクトを取得します。返されるオブジェクトのランタイム型は取得されるメンバーの種類によって異なります。現在サポートされているメンバー型とその戻り値の型は、参照ナビゲーション プロパティ (<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />)、コレクション ナビゲーション プロパティ (<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />)、プリミティブ/スカラー プロパティ (<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />)、および複合プロパティ (<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />) です。</summary>
      <returns>メンバーを表すオブジェクト。</returns>
      <param name="propertyName">メンバーの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>このオブジェクトによって表される追跡対象エンティティの元のプロパティ値を取得します。元の値は通常は最後にデータベースからクエリされたときのそのエンティティのプロパティ値です。</summary>
      <returns>元の値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>このエンティティのスカラー プロパティまたは複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>プロパティを表すオブジェクト。</returns>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>このエンティティから別のエンティティへの参照 (つまりコレクションではない) ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>データベースからエンティティを再読み込みして、プロパティ値をすべてデータベースからの値で上書きします。このメソッドを呼び出した後は、エンティティは変更なし状態になります。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>エンティティの状態を取得または設定します。</summary>
      <returns>状態。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>データベース エンティティ エントリの文字列表記を返します。</summary>
      <returns>データベース エンティティ エントリの文字列表記。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>このクラスのインスタンスは、<see cref="T:System.Data.Entity.DbContext" /> によって追跡されているエンティティの情報および制御へのアクセスを提供します。この型のオブジェクトを取得するには、そのコンテキストの Entity または Entities メソッドを使用します。</summary>
      <typeparam name="TEntity">エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>このエンティティから関連するエンティティのコレクションへのコレクション ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティを表す式。</param>
      <typeparam name="TElement">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>このエンティティから関連するエンティティのコレクションへのコレクション ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
      <typeparam name="TElement">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>このエンティティから関連するエンティティのコレクションへのコレクション ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティの複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>複合プロパティを表すオブジェクト。</returns>
      <param name="property">プロパティ。</param>
      <typeparam name="TComplexProperty">複合プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>このエンティティの複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>複合プロパティを表すオブジェクト。</returns>
      <param name="propertyName">複合プロパティの名前。</param>
      <typeparam name="TComplexProperty">複合プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>このエンティティの複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>複合プロパティを表すオブジェクト。</returns>
      <param name="propertyName">複合プロパティの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>このオブジェクトによって表される追跡対象エンティティの現在のプロパティ値を取得します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>エンティティを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> を返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>指定した <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> がこのインスタンスと等しいかどうかを判定します。2 つの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> インスタンスは、両方とも <see cref="T:System.Data.Entity.DbContext" /> 上の同じエンティティに対するエントリなら等しいと判定されます。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> がこのインスタンスと等しい場合は true、それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> がこのインスタンスと等しいかどうかを判定します。2 つの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> インスタンスは、両方とも <see cref="T:System.Data.Entity.DbContext" /> 上の同じエンティティに対するエントリなら等しいと判定されます。</summary>
      <returns>指定したオブジェクトがこのインスタンスと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>現在データベース内に存在している追跡対象エンティティの値のコピーを検索するためにデータベースをクエリします。返されたディクショナリ内の値を変更してもデータベース内の値は更新されません。データベース内にそのエンティティが見つからない場合は null が返されます。</summary>
      <returns>ストア値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。ハッシュ アルゴリズムでもハッシュ テーブルのようなデータ構造でも使用できるもの。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>現在のデータベース エンティティの型を取得します。</summary>
      <returns>現在のデータベース エンティティの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>この <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> インスタンスを検証して検証結果を返します。</summary>
      <returns>エンティティの検証結果。<see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> メソッドがオーバーライドされた場合は null の可能性があります。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>そのエンティティのメンバーを表すオブジェクトを取得します。返されるオブジェクトのランタイム型は取得されるメンバーの種類によって異なります。現在サポートされているメンバー型とその戻り値の型は、参照ナビゲーション プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />、コレクション ナビゲーション プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />、プリミティブ/スカラー プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />、複合プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> です。</summary>
      <returns>エンティティのメンバー。</returns>
      <param name="propertyName">メンバーの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>そのエンティティのメンバーを表すオブジェクトを取得します。返されるオブジェクトのランタイム型は取得されるメンバーの種類によって異なります。現在サポートされているメンバー型とその戻り値の型は、参照ナビゲーション プロパティ:  <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />、コレクション ナビゲーション プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />、プリミティブ/スカラー プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />、複合プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> です。</summary>
      <returns>メンバーを表すオブジェクト。</returns>
      <param name="propertyName">メンバーの名前。</param>
      <typeparam name="TMember">メンバーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>このオブジェクトが表す追跡対象エンティティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> を返します。</returns>
      <param name="entry">エントリ。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>このオブジェクトによって表される追跡対象エンティティの元のプロパティ値を取得します。元の値は通常は最後にデータベースからクエリされたときのそのエンティティのプロパティ値です。</summary>
      <returns>元の値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティのスカラー プロパティまたは複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>プロパティを表すオブジェクト。</returns>
      <param name="property">プロパティ。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>このエンティティのスカラー プロパティまたは複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>プロパティを表すオブジェクト。</returns>
      <param name="propertyName">プロパティの名前。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>このエンティティのスカラー プロパティまたは複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>プロパティを表すオブジェクト。</returns>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティから別のエンティティへの参照 (つまりコレクションではない) ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティを表す式。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>このエンティティから別のエンティティへの参照 (コレクションではない) ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>このエンティティから別のエンティティへの参照 (つまりコレクションではない) ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>データベースからエンティティを再読み込みして、プロパティ値をすべてデータベースからの値で上書きします。このメソッドを呼び出した後は、エンティティは変更なし状態になります。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>エンティティの状態を取得または設定します。</summary>
      <returns>状態。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>データベース エンティティ値の文字列表記を返します。</summary>
      <returns>データベース エンティティ値の文字列表記。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>これは抽象型基本クラスであり、エンティティのスカラー プロパティ、複合プロパティ、またはナビゲーション プロパティを表すために使用されます。スカラーおよび複合プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> を、参照ナビゲーション プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> を、コレクション ナビゲーション プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> を使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>このプロパティの現在の値を取得または設定します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>このメソッドが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>このメンバーを所有するエンティティのエントリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>指定されたエントリが現在のクエリに等しいかどうかを返します。</summary>
      <returns>現在のエントリが指定されたエントリと等しい場合は true、異なる場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するエントリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>指定されたエントリのハッシュ関数を返します。</summary>
      <returns>指定されたエントリのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>現在のエントリの型を取得します。</summary>
      <returns>現在のエントリの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>このプロパティを検証します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> オブジェクトのコレクション。null になることはありません。エンティティが有効な場合、コレクションは空になります。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>プロパティの名前を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>データベース プロパティ値の文字列表記を返します。</summary>
      <returns>データベース プロパティ値の文字列表記。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>抽象型基本クラス。エンティティのスカラー プロパティ、複合プロパティ、またはナビゲーション プロパティを表すために使用されます。スカラーおよび複合プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> を、参照ナビゲーション プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> を、コレクション ナビゲーション プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> を使用します。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TProperty">このプロパティが属するエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>このプロパティの現在の値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>このメソッドが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>このメンバーを所有するエンティティのエントリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>指定されたクエリが現在のクエリに等しいかどうかを返します。</summary>
      <returns>指定されたクエリが現在のクエリと等しい場合は true、異なる場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するクエリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>指定されたクエリのハッシュ関数を返します。</summary>
      <returns>指定されたクエリのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>現在のクエリの型を取得します。</summary>
      <returns>現在のクエリの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>このプロパティを検証します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> オブジェクトのコレクション。null になることはありません。エンティティが有効な場合、コレクションは空になります。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>データベース メンバー エントリの名前を取得します。</summary>
      <returns>データベース メンバー エントリの名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>このオブジェクトが表すプロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> を返します。</returns>
      <param name="entry">エントリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>データベース プロパティ値の文字列表記を返します。</summary>
      <returns>データベース プロパティ値の文字列表記。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> によって作成された Entity Data Model (EDM) を表します。<see cref="M:System.Data.Entity.Infrastructure.DbModel.Compile" /> メソッドは EDM 表現から <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> への変換に使用できます。後者はモデルのスナップショットをコンパイルしたものであり、<see cref="T:System.Data.Entity.DbContext" /> または <see cref="T:System.Data.Objects.ObjectContext" /> インスタンスのキャッシュと作成に適しています。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>このモードの <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> を作成します。これは <see cref="T:System.Data.Entity.DbContext" /> インスタンスのキャッシュと作成に適したスナップショットをコンパイルしたものです。</summary>
      <returns>コンパイルされたモデル。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> クラスの非ジェネリック バージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>このプロパティの現在の値を取得または設定します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>このプロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>このプロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>このプロパティの値が、データベースから読み込まれた後で変更されたかどうかを示す値を取得または設定します。</summary>
      <returns>このインスタンスが変更されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>このプロパティの元の値を取得または設定します。</summary>
      <returns>元の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>これが入れ子のプロパティとなっている <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> のプロパティ。このメソッドは、複合オブジェクトのプロパティには null 以外のエントリのみを返します。それ以外の場合、そのエンティティ自体のプロパティには null を返します。</summary>
      <returns>親の複合プロパティに対するエントリ。エンティティ プロパティの場合は null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>このクラスのインスタンスは <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> の Property メソッドから返され、スカラーまたは複合プロパティへのアクセスを可能にします。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>このプロパティの現在の値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>このプロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>このプロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>このプロパティの値が、データベースから読み込まれた後で変更されたかどうかを示す値を取得または設定します。</summary>
      <returns>このインスタンスが変更されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>このオブジェクトが表すプロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> を返します。</returns>
      <param name="entry">エントリ。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>このプロパティの元の値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>これが入れ子のプロパティとなっている <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> のプロパティ。このメソッドは、複合オブジェクトのプロパティには null 以外のエントリのみを返します。そのエンティティ自体のプロパティには null を返します。</summary>
      <returns>親の複合プロパティに対するエントリ。エンティティ プロパティの場合は null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>基になっているエンティティまたは複合オブジェクトの全プロパティのコレクション。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>このディクショナリ内の全プロパティのコピーを含む新しいディクショナリを作成します。新しいディクショナリでの変更はこのディクショナリには反映されません。その逆も同じです。</summary>
      <returns>このディクショナリの複製。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>指定された値が現在の値に等しいかどうかを返します。</summary>
      <returns>指定した値が現在の値と等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較する値。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>指定された値のハッシュ関数を返します。</summary>
      <returns>指定された値のハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>現在の値の型を取得します。</summary>
      <returns>現在の値の型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>プロパティの値を取得します。インデックス付きプロパティの取得に似ていますが、ジェネリック パラメーターの型が適用されます。多数のキャストを使用する式を書かなくても済むので、入れ子ディクショナリで特に便利です。</summary>
      <returns>
        <paramref name="propertyName" /> によって指定されたプロパティの <see cref="T:System.Type" /> 値を返します。</returns>
      <param name="propertyName">プロパティ名。</param>
      <typeparam name="TValue">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>指定したプロパティ名とそのプロパティの値を取得または設定します。値にはこのクラスの入れ子インスタンスも使用できます。</summary>
      <returns>プロパティの値。</returns>
      <param name="propertyName">取得するプロパティの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>このディクショナリ内の全プロパティの名前のセットを読み取り専用セットとして取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>別のディクショナリから値を読み取って、このディクショナリの値を設定します。別のディクショナリはこのディクショナリと同じ型またはこのディクショナリの型から派生した型に基づいている必要があります。</summary>
      <param name="propertyValues">このディクショナリから値を読み取ります。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>指定されているオブジェクトから値を読み取って、このディクショナリの値を設定します。オブジェクトの型は任意です。オブジェクト上のプロパティはどれも、名前がディクショナリ内のプロパティ名に一致し、読み取れるものであれば、読み取られます。その他のプロパティは無視されます。これによって、単純な Data Transfer Object (DTO) からプロパティをコピーできるようになります。</summary>
      <param name="obj">このオブジェクトから値を読み取ります。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>このディクショナリの基になっている型を持つオブジェクトを作成して、このディクショナリからのプロパティ値を与えます。</summary>
      <returns>このディクショナリのプロパティが新しいオブジェクトにコピーされます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>データベース プロパティ値の文字列表記を返します。</summary>
      <returns>データベース プロパティ値の文字列表記。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>データベース プロバイダーに関する情報を格納します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providerInvariantName">使用する SQL Server Compact Edition のバージョンを指定するプロバイダー不変名。</param>
      <param name="providerManifestToken">Schema 要素上のプロバイダーのマニフェスト トークン情報。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>使用する SQL Server Compact Edition のバージョンを指定するプロバイダー不変名を取得します。</summary>
      <returns>データベース プロバイダーのデータ プロバイダー。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Schema 要素上のプロバイダーのマニフェスト トークン情報を取得します。</summary>
      <returns>マニフェスト トークン。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> に対する非ジェネリックの LINQ to Entities クエリを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>返されたエンティティが <see cref="T:System.Data.Entity.DbContext" /> にキャッシュされない新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> オブジェクトを返します。</summary>
      <returns>ジェネリック セット オブジェクト。</returns>
      <typeparam name="TElement">クエリ作成の対象となった要素型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>IQueryable 要素型。</summary>
      <returns>要素型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>指定されたクエリが現在のクエリに等しいかどうかを返します。</summary>
      <returns>指定されたクエリが現在のクエリと等しい場合は true、異なる場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するクエリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>指定されたクエリのハッシュ関数を返します。</summary>
      <returns>指定されたクエリのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>現在のクエリの型を取得します。</summary>
      <returns>現在のクエリの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>付加済みの <see cref="T:System.Data.Entity.DbContext" /> に対する LINQ to Entities クエリを返します。</summary>
      <returns>付加済み LINQ クエリ。</returns>
      <param name="path">付加済み LINQ のパス。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>このクエリの列挙体を取得します。その結果、クエリがストアに対して実行されます。</summary>
      <returns>クエリの <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false を返します。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>例外をスローして、ストア クエリに直接バインドできないことを示します。</summary>
      <returns>返されることはありません。常にスローされます。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>IQueryable プロバイダー。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryProvider" /> を返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>基になっているクエリの <see cref="T:System.String" /> 表記を返します。</summary>
      <returns>クエリ文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> に対するキャッシュ済みの LINQ to Entities クエリを表します。</summary>
      <typeparam name="TResult">クエリの対象となるエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>返されたエンティティが <see cref="T:System.Data.Entity.DbContext" /> にキャッシュされない新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>指定されたクエリが現在のクエリに等しいかどうかを返します。</summary>
      <returns>指定されたクエリが現在のクエリと等しい場合は true、異なる場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するクエリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>指定されたクエリのハッシュ関数を返します。</summary>
      <returns>指定されたクエリのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>現在のクエリの型を取得します。</summary>
      <returns>現在のクエリの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>付加済みの <see cref="T:System.Data.Entity.DbContext" /> に対する LINQ to Entities クエリを返します。</summary>
      <returns>付加済み LINQ です。</returns>
      <param name="path">付加済み LINQ のパス。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>このクエリに対して非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> クラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> を返します。</returns>
      <param name="entry">エントリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>このクエリの列挙体を取得します。その結果、クエリがストアに対して実行されます。</summary>
      <returns>クエリの <see cref="T:System.Collections.Generic.IEnumerator`1" /> を返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>このクエリの列挙体を取得します。その結果、クエリがストアに対して実行されます。</summary>
      <returns>クエリの <see cref="T:System.Collections.IEnumerator" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false を返します。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>例外をスローして、ストア クエリに直接バインドできないことを示します。</summary>
      <returns>返されることはありません。常にスローされます。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>IQueryable 要素型。</summary>
      <returns>
        <see cref="T:System.Type" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>IQueryable プロバイダー。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryProvider" /> を返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>基になっているクエリの <see cref="T:System.String" /> 表記を返します。</summary>
      <returns>クエリ文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> クラスの非ジェネリック バージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>ナビゲーション プロパティの現在の値を取得または設定します。現在の値はナビゲーション プロパティが参照するエンティティです。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>このナビゲーション プロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>このナビゲーション プロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>データベースからエンティティが読み込まれたかどうかを示す値を取得します。</summary>
      <returns>エンティティが読み込まれている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>データベースからエンティティを読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>データベースからこのエンティティを読み込むために使用されるクエリを返します。返されたクエリは、フィルター処理やデータベース内での操作を実行するように LINQ を使って変更できます。</summary>
      <returns>エンティティに対するクエリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>このクラスのインスタンスは <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> の Reference メソッドから返され、エンティティの参照ナビゲーション プロパティの読み込みなどの操作を可能にします。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>ナビゲーション プロパティの現在の値を取得または設定します。現在の値はナビゲーション プロパティが参照するエンティティです。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>このナビゲーション プロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>このナビゲーション プロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>データベースからエンティティが読み込まれたかどうかを示す値を取得します。</summary>
      <returns>エンティティが読み込まれている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>データベースからエンティティを読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされません。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary> このオブジェクトが表すナビゲーション プロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> を返します。</returns>
      <param name="entry">エントリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>データベースからこのエンティティを読み込むために使用されるクエリを返します。返されたクエリは、フィルター処理やデータベース内での操作を実行するように LINQ を使って変更できます。</summary>
      <returns>エンティティに対するクエリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> から作成されたエンティティに対する SQL クエリを表します。クエリはそのコンテキストからの接続を使用して実行されます。このクラスのインスタンスはそのエンティティ型の <see cref="T:System.Data.Entity.DbSet" /> インスタンスから取得されます。クエリは、このオブジェクトが作成されたときに実行されるのではなく、列挙されるときに毎回実行されます。たとえば foreach を使用した場合などです。エンティティ以外のものに対する SQL クエリは <see cref="P:System.Data.Entity.DbContext.Database" /> を使用して作成されます。このクラスのジェネリック バージョンについては、<see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>関連付けられている <see cref="T:System.Data.Entity.DbContext" /> によってクエリ結果が追跡されない場合に新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>指定されたクエリが現在のクエリに等しいかどうかを返します。</summary>
      <returns>指定されたクエリが現在のクエリと等しい場合は true、異なる場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するクエリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetEnumerator">
      <summary>クエリを実行してその要素の列挙体を返します。</summary>
      <returns>要素の反復処理に使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>指定されたクエリのハッシュ関数を返します。</summary>
      <returns>指定されたクエリのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>現在のクエリの型を取得します。</summary>
      <returns>現在のクエリの型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false を返します。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>例外をスローして、ストア クエリに直接バインドできないことを示します。</summary>
      <returns>返されることはありません。常にスローされます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>クエリが作成されたときに設定された SQL 文字列を含む <see cref="T:System.String" /> を返します。パラメーターは含まれません。</summary>
      <returns>このインスタンスを表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> から作成されたエンティティに対する SQL クエリを表します。クエリはそのコンテキストからの接続を使用して実行されます。このクラスのインスタンスはそのエンティティ型の <see cref="T:System.Data.Entity.DbSet`1" /> インスタンスから取得されます。クエリは、このオブジェクトが作成されたときに実行されるのではなく、列挙されるときに毎回実行されます。たとえば foreach を使用した場合などです。エンティティ以外のものに対する SQL クエリは <see cref="P:System.Data.Entity.DbContext.Database" /> を使用して作成されます。このクラスの非ジェネリック バージョンについては、<see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> を参照してください。</summary>
      <typeparam name="TEntity">エンティティ。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>関連付けられている <see cref="T:System.Data.Entity.DbContext" /> によってクエリ結果が追跡されない場合に新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>指定されたクエリが現在のクエリに等しいかどうかを返します。</summary>
      <returns>指定されたクエリが現在のクエリと等しい場合は true、異なる場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するクエリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator">
      <summary>クエリを実行してその要素の列挙体を返します。</summary>
      <returns>その要素の列挙体。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>指定されたクエリのハッシュ関数を返します。</summary>
      <returns>指定されたクエリのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>現在のクエリの型を取得します。</summary>
      <returns>現在のクエリの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>クエリを実行してその要素の列挙体を返します。</summary>
      <returns>要素の反復処理に使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false を返します。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>例外をスローして、ストア クエリに直接バインドできないことを示します。</summary>
      <returns>返されることはありません。常にスローされます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>クエリが作成されたときに設定された SQL 文字列を含む <see cref="T:System.String" /> を返します。パラメーターは含まれません。</summary>
      <returns> このインスタンスを表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>エンティティに対する SaveChanges の結果、データベースが更新されることになっているのに、実際にはデータベース内で影響を受けた行がない場合に、<see cref="T:System.Data.Entity.DbContext" /> によってスローされる例外。通常、これはデータベースの更新が同時進行しており、一致することになっていた同時実行トークンが実際には一致しなかったことを示します。この例外によって参照される状態エントリは、セキュリティ保護のためにシリアル化されていません。シリアル化の後に状態エントリにアクセスすると null が返されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>データベース更新時に発生した例外を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>データベースに保存できなかったエンティティを表す <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> オブジェクトを取得します。</summary>
      <returns>データベースに保存できなかったエンティティ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>データベース内に EDM に関するメタデータを格納するために使用されるエンティティを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>メタデータ エンティティの識別子を取得または設定します。これは現在のところ常に 1 です。</summary>
      <returns>識別子。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>モデル ハッシュを取得または設定します。これはデータベースが作成された後、その基になったモデルが変更されたかどうかを調べるときに使用されます。</summary>
      <returns>モデル ハッシュ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>そのコンテキストで Code First によって計算されたモデル ハッシュを取得しようとします。そのコンテキストが Code First モードで使用されていない場合、このメソッドは null を返します。</summary>
      <returns>ハッシュ文字列。</returns>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Code First によって EDMX フォームで作成された Entity Data Model にアクセスするために使用されるメソッドが入っています。Code First が内部で作成したモデルを調べる必要のあるとき、通常これらのメソッドはデバッグで使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>指定されているコンテキストで Code First を使用し、結果の Entity Data Model を EDMX フォーム内で指定されているライターに書き込みます。このメソッドは、Code First を使用して内部でモデルを作成するコンテキスト インスタンスでしか使用できません。Database First または Model First を使用して作成したコンテキストでは使用できないメソッドです。既存の <see cref="T:System.Data.Objects.ObjectContext" /> を使用して作成したコンテキストでも、既存の <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> を使用して作成したコンテキストでも使用できません。</summary>
      <param name="context">コンテキスト。</param>
      <param name="writer">ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>指定されている <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> が表す Entity Data Model を EDMX フォーム内の指定されているライターに書き込みます。</summary>
      <param name="model">EDM を表すオブジェクト。</param>
      <param name="writer">ライター。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>このインターフェイスの実装は、指定されたデータベース名に基づいてある種類のデータベース サーバーに対する DbConnection オブジェクトを作成するために使用されます。インスタンスが <see cref="T:System.Data.Entity.Database" /> クラスに設定されているので、すべての <see cref="T:System.Data.Entity.DbContext" /> オブジェクトが接続情報なしで作成されることになります。または既定で特定の種類のデータベース サーバーが使用されるように、データベース名または接続文字列のみが使用されます。このインターフェイスには 2 つの実装が提供されています。<see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> は Microsoft SQL Server (EXPRESS edition も含む) への接続を作成するために使用され、<see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> は Microsoft SQL Server Compact Edition への接続を作成するために使用されます。その他のデータベース サーバー用の実装は必要に応じて追加できます。インターフェイスの実装は、複数のスレッドから同時にアクセスされるので、スレッド セーフまたは不変になっている必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>データベース名または接続文字列に基づいて接続を作成します。</summary>
      <returns>初期化された DbConnection。</returns>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 派生インスタンスを作成するためのファクトリです。デザイン時サービス、および既定のパブリック コンストラクターを持たないコンテキスト型のインスタンス化を有効にするには、このインターフェイスを実装します。デザイン時に <see cref="T:System.Data.Entity.DbContext" /> 派生インスタンスを作成して、デザイン時の特定の操作 (モデルのレンダリングや DDL の生成など) を有効にすることができます。デザイン時サービスでは、<see cref="T:System.Data.Entity.DbContext" /> 派生型と同じアセンブリに含まれているこのインターフェイスの実装を自動探索できます。</summary>
      <typeparam name="TContext">この型パラメーターは共変です。つまり、指定した型と、それから派生される任意の型を使用できます。共変および反変の詳細については、「」を参照してください。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 派生型の新しいインスタンスを作成します。</summary>
      <returns>
        <see cref="TContext" /> のインスタンス。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>この <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約では、<see cref="T:System.Data.Entity.DbModelBuilder" /> はモデルを構築するときにモデルに関するメタデータを含めます。<see cref="T:System.Data.Entity.DbContext" /> が規約に従ってモデルを作成するとき、<see cref="T:System.Data.Entity.DbModelBuilder" /> によって使用される一覧にこの規則が追加されます。その結果、<see cref="T:System.Data.Entity.DbContext" /> がデータベースの作成に使用されると、モデルのメタデータがデータベースに書き込まれます。その後、モデルがそのデータベースに対して最後に使用されてから変更されているかどうかの確認にこの規則を使用できます。この規則は <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約の一覧から削除できます。これを行うには <see cref="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" /> メソッドをオーバーライドします。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>
        <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> のインスタンスを提供できるオブジェクトによって実装されるインターフェイス。<see cref="T:System.Data.Entity.DbContext" /> クラスはこのインターフェイスを実行して基になっている ObjectContext へのアクセスを提供します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>オブジェクトのコンテキストを取得します。</summary>
      <returns>オブジェクト コンテキスト。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>     このクラスのインスタンスは、指定したデータベース名または接続文字列に基づいて、SQL Server LocalDb の DbConnection オブジェクトを作成する際に使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>     指定したバージョンの LocalDb の接続ファクトリの新しいインスタンスを作成します。SQL Server 2012 の LocalDb の場合、"v11.0" を使用します。</summary>
      <param name="localDbVersion">使用する LocalDb のバージョン。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>     指定したバージョンの LocalDb の接続ファクトリの新しいインスタンスを作成します。SQL Server 2012 の LocalDb の場合、"v11.0" を使用します。</summary>
      <param name="localDbVersion">使用する LocalDb のバージョン。</param>
      <param name="baseConnectionString">     データベース オプションとして使用する "Initial Catalog"、"Data Source"、"AttachDbFilename" 以外の接続文字列。CreateConnection が呼び出されるときに、データベース名に基づいて "Initial Catalog" と "AttachDbFilename" がこの文字列の前に追加されます。"Data Source" は、LocalDbVersion 引数に基づいて設定されます。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>     データベース オプションとして使用する "Initial Catalog"、"Data Source"、"AttachDbFilename" 以外の接続文字列。CreateConnection が呼び出されるときに、データベース名に基づいて "Initial Catalog" と "AttachDbFilename" がこの文字列の前に追加されます。"Data Source" は、LocalDbVersion 引数に基づいて設定されます。既定値は、"Integrated Security=True; MultipleActiveResultSets=True;" です。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>     指定したデータベース名または接続文字列に基づいて SQL Server LocalDb の接続を作成します。指定した文字列に "=" が含まれている場合、その文字列は完全な接続文字列として扱われます。それ以外の場合は、データベース名としてしか扱われません。</summary>
      <returns>初期化された DbConnection。</returns>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>この <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約では、派生  <see cref="T:System.Data.Entity.DbContext" /> クラスの名前が Code First によって構築された概念モデルのコンテナーとして使用されます。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>この <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約では、派生した <see cref="T:System.Data.Entity.DbContext" /> クラスの名前空間が Code First によって構築された概念モデルの名前空間として使用されます。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>このクラスのインスタンスは、<see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> および <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> への参照を置き換える式ツリーに挿入される定数式の作成に内部で使用されます。</summary>
      <typeparam name="TElement">要素の型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>LINQ 式ツリーで必要なパブリック プロパティ。</summary>
      <returns>
        <see cref="T:System.Data.Objects.ObjectQuery`1" /> を返します。クエリです。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>このクラスのインスタンスは、指定されているデータベース名または接続文字列に基づいて、SQL Server Compact Edition の DbConnection オブジェクトの作成に使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary> 空 (既定) の <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> と <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> プロパティで新しい接続ファクトリを作成します。</summary>
      <param name="providerInvariantName">使用する SQL Server Compact Edition のバージョンを指定するプロバイダー不変名。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>指定されている <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> と <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> プロパティで新しい接続ファクトリを作成します。</summary>
      <param name="providerInvariantName">使用する SQL Server Compact Edition のバージョンを指定するプロバイダー不変名。</param>
      <param name="databaseDirectory">データベース名の前に添えるパス名。これは SQL Server Compact Edition がデータベース ファイルを作成するときや読み取るときに使用するファイル名の一部となります。空の文字列を指定すると、SQL Server Compact Edition はその既定の場所をデータベース ファイルの場所として使用します。</param>
      <param name="baseConnectionString">データベース オプションとして使用する "Data Source" 以外の接続文字列。CreateConnection が呼び出されるとき、データベース名に基づいて "Data Source" がこの文字列の前に追加されます。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>データベース オプションとして使用する "Data Source" 以外の接続文字列。CreateConnection が呼び出されるとき、データベース名に基づいて "Data Source" がこの文字列の前に追加されます。既定値は空の文字列です。これは他のオプションが使用されないことを意味します。</summary>
      <returns>使用する接続文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>指定されているデータベース名または接続文字列に基づいて SQL Server Compact Edition の接続を作成します。文字列に "=" 文字が含まれている場合、その文字列は完全な接続文字列として扱われます。そうでなければ、データベースの名前としてしか扱われません。</summary>
      <returns>初期化された DbConnection。</returns>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>データベース名の前に添えるパス名。これは SQL Server Compact Edition がデータベース ファイルを作成するときや読み取るときに使用するファイル名の一部となります。既定値は "|DataDirectory|" です。これはファイルが所定のデータ ディレクトリに保存されることを意味します。</summary>
      <returns>データベースのパス。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>使用する SQL Server Compact Edition のバージョンを指定するプロバイダー不変名。</summary>
      <returns>プロバイダーの不変名。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary> このクラスのインスタンスは、指定されているデータベース名または接続文字列に基づいて、SQL Server の DbConnection オブジェクトの作成に使用されます。既定では、.\SQLEXPRESS に接続されます。これは、ファクトリ インスタンスを作成するときに、基本接続文字列を変更することによって変更できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>新しい接続ファクトリを既定の BaseConnectionString プロパティ (Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True) を使って作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>新しい接続ファクトリを、指定されている BaseConnectionString プロパティを使って作成します。</summary>
      <param name="baseConnectionString">データベース オプションとして使用する "Initial Catalog" 以外の接続文字列。CreateConnection が呼び出されるとき、データベース名に基づいて "Initial Catalog" がこの文字列の前に追加されます。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>データベース オプションとして使用する "Initial Catalog" 以外の接続文字列。CreateConnection が呼び出されるとき、データベース名に基づいて "Initial Catalog" がこの文字列の前に追加されます。既定値は "Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True" です。</summary>
      <returns>接続文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>指定されているデータベース名または接続文字列に基づいて SQL Server の接続を作成します。文字列に "=" 文字が含まれている場合、その文字列は完全な接続文字列として扱われます。そうでなければ、データベースの名前としてしか扱われません。</summary>
      <returns>初期化された DbConnection。</returns>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>この属性は派生 <see cref="T:System.Data.Entity.DbContext" /> クラス全体に、またはそのクラスの個々の <see cref="T:System.Data.Entity.DbSet`1" /> または <see cref="T:System.Data.Entity.IDbSet`1" /> プロパティに適用できます。適用時、検出された <see cref="T:System.Data.Entity.DbSet`1" /> または <see cref="T:System.Data.Entity.IDbSet`1" /> プロパティはまだモデルに入っていますが、自動的に初期化されません。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>Database First または Model First モードで <see cref="T:System.Data.Entity.DbContext" /> テンプレートから生成されたコンテキストが Code First モードで使用されたときにスローされる例外。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>コードベースの移行の基本クラスを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     既存のテーブルに列を追加する操作を追加します。</summary>
      <param name="table">     列を追加するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">     追加する列の名前。</param>
      <param name="columnAction">     追加する列を指定するアクション     つまり、c =&amp;gt; c.Int(nullable: false, defaultValue: 3)。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     新しい外部キー制約を作成する操作を追加します。</summary>
      <param name="dependentTable">     外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="dependentColumn">外部キー列。</param>
      <param name="principalTable">     この外部キーが参照する列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="principalColumn">     この外部キーが参照する列。値を指定しない場合、プリンシパル テーブルの主キーが参照されます。</param>
      <param name="cascadeDelete">     外部キー リレーションシップに連鎖削除を構成するかどうかを示す値。値を指定しない場合、連鎖削除は無効になります。</param>
      <param name="name">     データベース内の外部キー制約の名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     新しい外部キー制約を作成する操作を追加します。</summary>
      <param name="dependentTable">     外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="dependentColumns">外部キー列。</param>
      <param name="principalTable">     この外部キーが参照する列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="principalColumns">     この外部キーが参照する列。値を指定しない場合、プリンシパル テーブルの主キーが参照されます。</param>
      <param name="cascadeDelete">     外部キー リレーションシップに連鎖削除を構成するかどうかを示す値。値を指定しない場合、連鎖削除は無効になります。</param>
      <param name="name">     データベース内の外部キー制約の名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Object)">
      <summary>     新しい主キーを作成する操作を追加します。</summary>
      <param name="table">     主キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="column">主キー列。</param>
      <param name="name">     データベース内の主キーの名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Object)">
      <summary>     複数の列に基づいて新しい主キーを作成する操作を追加します。</summary>
      <param name="table">     主キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columns">主キー列。</param>
      <param name="name">     データベース内の主キーの名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     既存の列の定義を変更する操作を追加します。</summary>
      <param name="table">     列が存在するテーブルの名前。     スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">変更する列の名前。</param>
      <param name="columnAction">     列の新しい定義を指定するアクション。     つまり、c =&amp;gt; c.String(nullable: false, defaultValue: "none")。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     1 つの列にインデックスを作成する操作を追加します。</summary>
      <param name="table">     インデックスを作成するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="column">インデックスを作成する列の名前。</param>
      <param name="unique">     これが一意のインデックスかどうかを示す値。値を指定しない場合、一意でないインデックスが作成されます。</param>
      <param name="name">     データベース内のインデックスに使用する名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     複数の列にインデックスを作成する操作を追加します。</summary>
      <param name="table">     インデックスを作成するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columns">インデックスを作成する列の名前。</param>
      <param name="unique">     これが一意のインデックスかどうかを示す値。値を指定しない場合、一意でないインデックスが作成されます。</param>
      <param name="name">     データベース内のインデックスに使用する名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>     新しいテーブルを作成する操作を追加します。</summary>
      <returns>テーブル作成操作をさらに構成できるようにするオブジェクト。</returns>
      <param name="name">テーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columnsAction">     テーブルに含まれる列を指定するアクション。     つまり、t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TColumns">     このテーブル作成操作の対象となる列。この型を指定する必要はありません。指定する columnsAction パラメーターから推論されます。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>     ダウングレード プロセス中に実行する操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>     既存の列を削除する操作を追加します。</summary>
      <param name="table">     列を削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">削除する列の名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>     外部キー制約をその名前に基づいて削除する操作を追加します。</summary>
      <param name="dependentTable">     外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">データベース内の外部キー制約の名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>     外部キー制約を対象の列に基づいて削除する操作を追加します。</summary>
      <param name="dependentTable">     外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="dependentColumn">外部キー列。</param>
      <param name="principalTable">     この外部キーが参照する列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="principalColumn">この外部キーが参照する列。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>     外部キー制約を対象の列に基づいて削除する操作を追加します。</summary>
      <param name="dependentTable">     外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="dependentColumns">外部キー列。</param>
      <param name="principalTable">     この外部キーが参照する列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>     インデックスをその名前に基づいて削除する操作を追加します。</summary>
      <param name="table">     インデックスを削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">削除するインデックスの名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>     インデックスを対象の列に基づいて削除する操作を追加します。</summary>
      <param name="table">     インデックスを削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columns">インデックスの対象となる列の名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>     既定の名前で作成された既存の主キーを削除する操作を追加します。</summary>
      <param name="table">     主キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>     既定の名前を持たない既存の主キーを削除する操作を追加します。</summary>
      <param name="table">     主キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">削除する主キーの名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>     テーブルを削除する操作を追加します。</summary>
      <param name="name">     削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>このインスタンスが、指定したオブジェクトと等しいかどうかを判定します。</summary>
      <returns>指定した Object が現在の Object と等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在の Object と比較する Object。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>パラメーターまたは列のデータを指定された型で取得します。</summary>
      <returns>現在のオブジェクトのハッシュ コードを返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>現在のインスタンスのランタイム型を返します。</summary>
      <returns>現在のインスタンスの正確なランタイム型を表す型インスタンスを返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>現在のオブジェクトの簡易コピーを作成します。</summary>
      <returns>現在のオブジェクトの簡易コピーを返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>     テーブルを新しいスキーマに移動する操作を追加します。</summary>
      <param name="name">     移動するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="newSchema">テーブルの移動先となるスキーマ。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>     列の名前を変更する操作を追加します。</summary>
      <param name="table">     名前を変更する列を含むテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">名前を変更する列の名前。</param>
      <param name="newName">列の新しい名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>     テーブルの名前を変更する操作を追加します。テーブルのスキーマを変更するには MoveTable を使用します。</summary>
      <param name="name">     名前を変更するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="newName">     テーブルの新しい名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>     SQL コマンドを実行する操作を追加します。</summary>
      <param name="sql">実行する SQL。</param>
      <param name="suppressTransaction">     移行プロセスに使用されるトランザクション外で SQL を実行するかどうかを示す値。値を指定しない場合、SQL はトランザクション内で実行されます。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>     アップグレード プロセス中に実行する操作。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>指定したモデルでの移行の使用に関連する構成。通常は、このクラスを使用するのではなく、<see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> から派生する構成クラスを作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>     DbMigrationsConfiguration クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>     自動移行中にデータ損失を許容するかどうかを示す値を取得または設定します。false に設定すると、自動移行の一環としてデータ損失が発生した場合に例外がスローされます。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>     データベースの移行時に自動移行を使用できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>     移行のスキャフォールド時に使用するコード ジェネレーターを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>     移行するモデルを表す派生 DbContext を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>     指定したデータベース プロバイダーで使用されるように設定されている SQL ジェネレーターを取得します。</summary>
      <returns>データベース プロバイダーに設定されている SQL ジェネレーター。</returns>
      <param name="providerInvariantName">SQL ジェネレーターを取得するデータベース プロバイダーの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>     コードベースの移行を含むアセンブリを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>     コードベースの移行が格納されているサブディレクトリを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>     コードベースの移行に使用される名前空間を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>     指定したデータベース プロバイダーで使用される新しい SQL ジェネレーターを追加します。</summary>
      <param name="providerInvariantName">SQL ジェネレーターを設定するデータベース プロバイダーの名前。</param>
      <param name="migrationSqlGenerator">使用される SQL ジェネレーター。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>     移行するデータベースの接続をオーバーライドする値を取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>指定したモデルでの移行の使用に関連する構成を表します。</summary>
      <typeparam name="TContext">コンテキスト。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <returns>指定した Object が現在の Object と等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在の Object と比較する Object。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>パラメーターまたは列のデータを指定された型で取得します。</summary>
      <returns>現在のオブジェクトのハッシュ コードを返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>現在のインスタンスのランタイム型を返します。</summary>
      <returns>現在のインスタンスの正確なランタイム型を表す型インスタンスを返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>現在のオブジェクトの簡易コピーを作成します。</summary>
      <returns>現在のオブジェクトの簡易コピーを返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>     最新の移行へのアップグレード後に動作し、シード データを更新できるようにします。</summary>
      <param name="context">シード データの更新に使用されるコンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>既存の移行をデータベースに適用するために使用されます。このクラスを使用して、任意の移行にアップグレードおよびダウングレードできます。モデルの変更に基づいて移行をスキャフォールドするには、<see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" /> を使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>     DbMigrator クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">移行プロセスに使用される構成。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>     移行プロセスに使用されている構成を取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>     ターゲット データベースに適用されているすべての移行を取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>     構成済みの移行アセンブリで定義されているすべての移行を取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>     アセンブリで定義されているが、ターゲット データベースに適用されていないすべての移行を取得します。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>     移行が適用される前のデータベースの状態を表す移行 ID。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>     ターゲット データベースを、指定された移行に更新します。</summary>
      <param name="targetMigration">アップグレード/ダウングレード先の移行。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.IDbSetExtensions">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" /> の拡張メソッドのセット。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>SaveChanges が呼び出されたときに、キー単位でエンティティを追加または更新します。データベース用語の "upsert" 操作に相当します。このメソッドは、Migrations を使用してデータをシードする場合に役立つことがあります。</summary>
      <param name="set">作成、読み取り、更新、および削除の各操作を実行するために使用される <see cref="T:System.Data.Entity.IDbSet`1" /> オブジェクト。</param>
      <param name="identifierExpression">Add または Update のどちらの操作を実行するかを決定する際に使用されるプロパティを指定する式。</param>
      <param name="entities">追加または更新するエンティティ。</param>
      <typeparam name="TEntity">Entity の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>SaveChanges が呼び出されたときに、キー単位でエンティティを追加または更新します。データベース用語の "upsert" 操作に相当します。このメソッドは、Migrations を使用してデータをシードする場合に役立つことがあります。</summary>
      <param name="set">作成、読み取り、更新、および削除の各操作を実行するために使用される <see cref="T:System.Data.Entity.IDbSet`1" /> オブジェクト。</param>
      <param name="entities">追加または更新するエンティティ。</param>
      <typeparam name="TEntity">Entity の型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>列を構成する際に使用するヘルパー クラスを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)">
      <summary>バイナリ データを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="maxLength">配列データの許容最大長。</param>
      <param name="fixedLength">すべてのデータを最大長まで埋め込むかどうかを示す値。</param>
      <param name="isMaxLength">データベース プロバイダーでサポートされる最大長を使用するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="timestamp">この列をタイムスタンプとして構成するかどうかを示す値。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
      <summary>ブール型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)">
      <summary>Byte 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)">
      <summary>DateTime 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="precision">列の有効桁数。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)">
      <summary>DateTimeOffset 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="precision">列の有効桁数。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Decimal 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="precision">列の有効桁数。</param>
      <param name="scale">列の小数点以下桁数。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)">
      <summary>Double 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のオブジェクトと等しいかどうかを示します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Spatial.DbGeography,System.String,System.String,System.String)">
      <summary>geography 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Spatial.DbGeometry,System.String,System.String,System.String)">
      <summary>geometry 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)">
      <summary>GUID 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)">
      <summary>整数型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)">
      <summary>Long 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>現在のオブジェクトの簡易コピーを作成します。</summary>
      <returns>現在のオブジェクトの簡易コピー。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)">
      <summary>Short 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)">
      <summary>Single 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
      <summary>String 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="maxLength">文字列データの許容最大長。</param>
      <param name="fixedLength">すべてのデータを最大長まで埋め込むかどうかを示す値。</param>
      <param name="isMaxLength">データベース プロバイダーでサポートされる最大長を使用するかどうかを示す値。</param>
      <param name="unicode">列で Unicode コンテンツをサポートするかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)">
      <summary>Time 型のデータを格納するための新しい列定義を作成します。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="precision">列の有効桁数。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigration" /> での CreateTable 呼び出しによって作成されるテーブルをさらに構成するために使用するヘルパー クラスです。</summary>
      <typeparam name="TColumns">テーブル内の列の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Builders.TableBuilder`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createTableOperation">さらに構成するテーブル作成操作。</param>
      <param name="migration">テーブルが作成される移行。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>テーブルに作成する外部キー制約を指定します。</summary>
      <returns>オブジェクト自身 (複数の呼び出しを連結するため)。</returns>
      <param name="principalTable">外部キー制約の対象となるテーブルの名前。</param>
      <param name="dependentKeyExpression">外部キーのプロパティを表すラムダ式。外部キーが複数のプロパティで構成される場合は、それらのプロパティを含む匿名型を指定します。</param>
      <param name="cascadeDelete">外部キー制約で連鎖削除を構成するかどうかを示す値。</param>
      <param name="name">この外部キー制約の名前。名前を指定しない場合は、既定の名前が計算されます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>現在のオブジェクトのハッシュ コードを取得します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>現在のオブジェクトの型を取得します。</summary>
      <returns>現在のオブジェクトの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Object)">
      <summary>テーブルに作成するインデックスを指定します。</summary>
      <returns>オブジェクト自身 (複数の呼び出しを連結するため)。</returns>
      <param name="indexExpression">インデックスを付けるプロパティを表すラムダ式。複数のプロパティにインデックスを付ける場合は、それらのプロパティを含む匿名型を指定します。</param>
      <param name="unique">これが一意のインデックスかどうかを示す値。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>現在のオブジェクトの簡易コピーを作成します。</summary>
      <returns>現在のオブジェクトの簡易コピー。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Object)">
      <summary>テーブルの主キーを指定します。</summary>
      <returns>オブジェクト自身 (複数の呼び出しを連結するため)。</returns>
      <param name="keyExpression">主キーとして使用するプロパティを表すラムダ式。主キーが複数のプロパティで構成される場合は、それらのプロパティを含む匿名型を指定します。</param>
      <param name="name">主キーの名前。null を指定した場合、既定の名前が生成されます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>現在のオブジェクトの文字列形式を返します。</summary>
      <returns>現在のオブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>コードベースの移行の C# コードを生成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte)">
      <summary>
        <see cref="T:System.Byte" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
        <see cref="T:System.Byte[]" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>ユーザーが表示および編集できるプライマリ コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="operations">移行で実行される操作。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>ラムダ式を使用して一連の列名を指定するコードを生成します。</summary>
      <param name="columns">コード生成の対象となる列。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="addColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="alterColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> の定義を指定するコードを生成します。</summary>
      <param name="column">コード生成の対象となる列定義。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="emitName">定義に列名を含めるかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="createIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> を実行するコードを生成します。</summary>
      <param name="createTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="dropColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="dropForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="dropIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="dropPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" /> を実行するコードを生成します。</summary>
      <param name="dropTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" /> を実行するコードを生成します。</summary>
      <param name="moveTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="renameColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" /> を実行するコードを生成します。</summary>
      <param name="renameTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" /> を実行するコードを生成します。</summary>
      <param name="sqlOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>
        <see cref="T:System.Data.Spatial.DbGeography" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>
        <see cref="T:System.Data.Spatial.DbGeometry" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>不明なデータ型の列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>
        <see cref="T:System.String" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>移行のメタデータを含む分離コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="operations">移行で実行される操作。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>移行のメタデータを含む分離コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="createIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>文字列に格納できるように適切なエスケープを使用して識別子を引用符で囲みます。</summary>
      <returns>引用符で囲まれた識別子。</returns>
      <param name="identifier">引用符で囲む識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>データベース成果物の名前から無効な文字を削除します。</summary>
      <returns>無効な文字が削除された名前。</returns>
      <param name="name">無効な文字を削除する名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>指定したデータ型の列に使用する型名を取得します。</summary>
      <returns>生成される移行で使用する型名。</returns>
      <param name="primitiveTypeKind">変換するデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>WriteClassStart で始まるクラスの終了コードを生成します。</summary>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>ステートメントとクラス定義を使用して名前空間を生成します。</summary>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="base">生成されるクラスの基本クラス。</param>
      <param name="designer">分離コード ファイルに対してこのクラスを生成するかどうかを示す値。</param>
      <param name="namespaces">追加する using ディレクティブで指定する名前空間。null の場合は、GetDefaultNamespaces から返される名前空間が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>分離コード ファイル内のソース モデルまたはターゲット モデルを返すプロパティを生成します。</summary>
      <param name="name">プロパティ名。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>コードベースの移行のコードを生成するプロバイダーの基本クラスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>     ユーザーのプロジェクトに追加するコードを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="operations">移行で実行される操作。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary> 生成されるコードに "using" または "Imports" ディレクティブとして出力する必要がある既定の名前空間を取得します。</summary>
      <returns>名前空間名の順序指定された一覧。</returns>
      <param name="designer">分離コード ファイルに対してこのクラスを生成するかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary> 指定した操作によって生成されたコードを処理するために、"using" または "Imports" ディレクティブとして出力する必要がある名前空間を取得します。</summary>
      <returns>名前空間名の順序指定された一覧。</returns>
      <param name="operations">コード生成の対象となる操作。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>モデルの保留中の変更をデータベースに適用するコードベースの移行をスキャフォールディングします。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="migrationsConfiguration">スキャフォールディングに使用する構成。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary> 移行の生成されるコードで使用される名前空間を取得または設定します。既定では、この名前空間は、コンストラクターに渡される移行構成オブジェクトの MigrationsNamespace と同じです。VB.NET プロジェクトの場合、プロジェクトのルート名前空間を考慮して、これを更新する必要があります。</summary>
      <returns>移行の生成されるコードで使用される名前空間。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>     モデルの保留中の変更をデータベースに適用するコードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
      <param name="migrationName">スキャフォールディングする移行に使用する名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>モデルの保留中の変更をデータベースに適用するコードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
      <param name="migrationName">スキャフォールディングする移行に使用する名前。</param>
      <param name="ignoreChanges">モデルの変更を除外する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary> 以前に実行されたデータベース初期化子に対応する初期コードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>   スキャフォールディングされ、ファイルに書き込まれる準備ができているコードベースの移行を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>     分離コード ファイルに格納するスキャフォールディングされた移行コードを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>     この移行を保存するユーザーのプロジェクトのサブディレクトリを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>     この移行に使用するプログラミング言語を取得または設定します。通常、生成されるコードのファイル拡張子に使用されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>     この移行の一意の識別子を取得または設定します。通常、生成されるコードのファイル名に使用されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>     ユーザーが編集できるスキャフォールディングされた移行コードを取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingException">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> の別の AppDomain での操作の実行中に発生した例外を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化されたデータを使用して、<see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされた例外に関するシリアル化されたオブジェクト データ。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.String,System.String,System.String)">
      <summary>指定したエラー、内部例外の種類、およびスタック トレースを使用して、<see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerType">スローされた例外の種類。</param>
      <param name="innerStackTrace">スローされた例外のスタック トレース。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、ターゲット オブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="info">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">このシリアル化のターゲット。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerStackTrace">
      <summary>スローされた例外のスタック トレースを取得します。</summary>
      <returns>スローされた例外のスタック トレース。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerType">
      <summary>スローされた例外の種類を取得します。</summary>
      <returns>スローされた例外の種類。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Visual Studio で編集するアプリケーションと対話する必要がある移行関連のコマンドを実行するために、デザイン時ツールで使用されるヘルパー クラスを表します。アプリケーションを編集するため、常に最新バージョンが読み込まれるようにアセンブリを個別の AppDomain に読み込む必要があります。また、構成が確実に適用されるように、スタートアップ プロジェクトの App/Web.config ファイルもコピーされます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyName">使用する移行構成が含まれるアセンブリの名前。</param>
      <param name="configurationTypeName">使用する移行構成の名前空間修飾名。</param>
      <param name="workingDirectory">コンパイル済みアセンブリを格納する作業ディレクトリ。</param>
      <param name="configurationFilePath">スタートアップ プロジェクトの config ファイルのパス。</param>
      <param name="dataDirectory">スタートアップ プロジェクトのアプリケーション データ ディレクトリのパス。通常は、Web アプリケーションの App_Data ディレクトリまたは実行可能ファイルの作業ディレクトリです。</param>
      <param name="connectionStringInfo">移行するデータベースへの接続。null を指定した場合、コンテキストの既定の接続が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> で使用したすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> で使用したすべてのリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースを解放する場合は true。アンマネージ リソースのみを解放する場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>ファサードで使用したすべてのアンマネージ リソースを解放します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> から派生するすべての型の完全修飾名を取得します。</summary>
      <returns>見つかったすべてのコンテキスト型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>データベースに適用されているすべての移行の一覧を取得します。</summary>
      <returns>適用されている移行の ID。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>データベースに適用されていないすべての移行の一覧を取得します。</summary>
      <returns>保留中の移行の ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>情報をログに記録するために実行するアクションを取得または設定します。</summary>
      <returns>情報をログに記録するために実行するアクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>詳細情報をログに記録するために実行するアクションを取得または設定します。</summary>
      <returns>詳細情報をログに記録するために実行するアクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>警告をログに記録するために実行するアクションを取得または設定します。</summary>
      <returns>警告をログに記録するために実行するアクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>モデルの保留中の変更を適用するコードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
      <param name="migrationName">生成される移行の名前。</param>
      <param name="language">生成される移行のプログラミング言語。</param>
      <param name="rootNamespace">移行の追加先となるプロジェクトのルート名前空間。</param>
      <param name="ignoreChanges">モデルの変更を除外する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>以前に実行されたデータベース初期化子に対応する初期コードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
      <param name="language">生成される移行のプログラミング言語。</param>
      <param name="rootNamespace">移行の追加先となるプロジェクトのルート名前空間。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>2 つの移行間での移行を実行する SQL スクリプトを生成します。</summary>
      <returns>生成された SQL スクリプト。</returns>
      <param name="sourceMigration">更新元の移行。null を指定した場合、現在のデータベースを更新するスクリプトが生成されます。</param>
      <param name="targetMigration">更新先の移行。null を指定した場合、最新の移行に更新するスクリプトが生成されます。</param>
      <param name="force">自動移行中にデータの損失を許容するかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>データベースを、指定した移行に更新します。</summary>
      <param name="targetMigration">移行先の移行の ID。null を指定した場合、データベースが最新の移行に更新されます。</param>
      <param name="force">自動移行中にデータの損失を許容するかどうかを示す値。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>コードベースの移行の Visual Basic .Net コードを生成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte)">
      <summary>
        <see cref="T:System.Byte" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
        <see cref="T:System.Byte[]" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>ユーザーが表示および編集できるプライマリ コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="operations">移行で実行される操作。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>ラムダ式を使用して一連の列名を指定するコードを生成します。</summary>
      <param name="columns">コード生成の対象となる列。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="addColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="alterColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> の定義を指定するコードを生成します。</summary>
      <param name="column">コード生成の対象となる列定義。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="emitName">定義に列名を含めるかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="createIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> を実行するコードを生成します。</summary>
      <param name="createTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="dropColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="dropForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="dropIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="dropPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" /> を実行するコードを生成します。</summary>
      <param name="dropTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" /> を実行するコードを生成します。</summary>
      <param name="moveTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="renameColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" /> を実行するコードを生成します。</summary>
      <param name="renameTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" /> を実行するコードを生成します。</summary>
      <param name="sqlOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>
        <see cref="T:System.Data.Spatial.DbGeography" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>
        <see cref="T:System.Data.Spatial.DbGeometry" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>     不明なデータ型の列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>
        <see cref="T:System.String" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>移行のメタデータを含む分離コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="operations">移行で実行される操作。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>移行のメタデータを含む分離コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="createIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>     文字列に格納できるように適切なエスケープを使用して識別子を引用符で囲みます。</summary>
      <returns>引用符で囲まれた識別子。</returns>
      <param name="identifier">引用符で囲む識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>     データベース成果物の名前から無効な文字を削除します。</summary>
      <returns>無効な文字が削除された名前。</returns>
      <param name="name">無効な文字を削除する名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     指定したデータ型の列に使用する型名を取得します。</summary>
      <returns>生成される移行で使用する型名。</returns>
      <param name="primitiveTypeKind">変換するデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary> WriteClassStart で始まるクラスの終了コードを生成します。</summary>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>     ステートメントとクラス定義を使用して名前空間を生成します。</summary>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="base">生成されるクラスの基本クラス。</param>
      <param name="designer">分離コード ファイルに対してこのクラスを生成するかどうかを示す値。</param>
      <param name="namespaces">追加する Imports ディレクティブで指定する名前空間。null の場合は、GetDefaultNamespaces から返される名前空間が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     分離コード ファイル内のソース モデルまたはターゲット モデルを返すプロパティを生成します。</summary>
      <param name="name">プロパティの名前。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>   このクラスは、データベースから移行履歴の読み取りと書き込みを行うために Code First Migrations で使用されます。このクラスは他のコードで使用するためのものではありません。部分信頼での実行時に Entity Framework がアクセスできるように、常にパブリック クラスとして使用します。このクラスは、今後変更または削除される可能性があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.CreatedOn">
      <summary>     この移行履歴エントリが作成された日時を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>     この行が表す移行の ID を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>     この移行が適用された後のモデルの状態を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Byte" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>     このエントリが作成された Entity Framework のバージョンを取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>自動移行によってデータが失われた場合に発生するエラーを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>     AutomaticDataLossException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>前回の移行の適用後、モデルの保留中の変更があるときに、自動移行が無効になっている場合に発生するエラーを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>     AutomaticMigrationsDisabledException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>コードベースの移行に関する追加のメタデータを提供します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>     移行の一意の識別子を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>     この移行を実行する前のモデルの状態を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>     この移行を実行した後のモデルの状態を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Code First Migrations のパイプラインで発生するエラーを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> シリアル化されたデータを使用して、MigrationsException クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされる例外に関するシリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary> MigrationsException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>移行プロセスで使用できるロガーの基本クラスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>     情報メッセージをログに記録します。</summary>
      <param name="message">ログに記録されるメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>     詳細出力を要求したユーザーにのみ表示される追加情報をログに記録します。</summary>
      <param name="message">ログに記録されるメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>     ユーザーに通知する必要がある警告をログに記録します。</summary>
      <param name="message">ログに記録されるメッセージ。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>コア <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> をラップするデコレータの基本クラスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>     MigratorBase クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerMigrator">このデコレータがラップしている Migrator。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>     移行プロセスに使用されている構成を取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>     データベースに適用されている移行の一覧を取得します。</summary>
      <returns>移行 ID の一覧。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>     アセンブリで定義されている移行の一覧を取得します。</summary>
      <returns>移行 ID の一覧。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>     データベースに適用されていない保留中の移行の一覧を取得します。</summary>
      <returns>移行 ID の一覧。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>     ターゲット データベースを最新の移行に更新します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>     ターゲット データベースを、指定された移行に更新します。</summary>
      <param name="targetMigration">アップグレード/ダウングレード先の移行。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>移行操作中のログを提供するデコレータです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>     MigratorLoggingDecorator クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerMigrator">このデコレータがラップしている Migrator。</param>
      <param name="logger">メッセージの書き込み先のロガー。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>データベースに変更を適用するのではなく、SQL スクリプトを生成するデコレータを表します。このデコレータを使用して <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> をラップすると、<see cref="T:System.Data.Entity.Migrations.DbMigrator" /> によってターゲット データベースに変更が適用されるのを防ぐことができます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerMigrator">このデコレータがラップしている Migrator。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>データベースをターゲットの移行に更新します。</summary>
      <returns>生成された SQL スクリプト。</returns>
      <param name="sourceMigration">ソースの移行。</param>
      <param name="targetMigration">アップグレード/ダウングレード先の移行。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>テーブルに追加する列を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>     AddColumnOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">列を追加するテーブルの名前。</param>
      <param name="column">追加する列の詳細。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>     追加する列の詳細を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>     追加した列の削除を表す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>{insert text here} を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>     列を追加するテーブルの名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>テーブルに追加する外部キー制約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>     AddForeignKeyOperation クラスの新しいインスタンスを初期化します。PrincipalTable、PrincipalColumns、DependentTable、DependentColumns の各プロパティも設定する必要があります。</summary>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>     外部キー制約で連鎖削除を構成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>     外部キー列にインデックスを作成する操作を取得します。</summary>
      <returns>インデックスを追加する操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>     外部キー制約を削除する操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>     外部キー制約の対象となる列の名前。</summary>
      <returns>列の名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>テーブルへの主キーの追加を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     AddPrimaryKeyOperation クラスの新しいインスタンスを初期化します。テーブルと列のプロパティも設定する必要があります。</summary>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>     主キーを削除する操作を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>既存の列の変更を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>     AlterColumnOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">列が属するテーブルの名前。</param>
      <param name="column">列の変更内容の詳細。</param>
      <param name="isDestructiveChange">この変更によってデータが失われるかどうかを示す値。</param>
      <param name="inverse">列のこの変更を元に戻す操作。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>     AlterColumnOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">列が属するテーブルの名前。</param>
      <param name="column">列の変更内容の詳細。</param>
      <param name="isDestructiveChange">この変更によってデータが失われるかどうかを示す値。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>     列の新しい定義を取得します。</summary>
      <returns>列定義。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>     変更を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>     列が属するテーブルの名前を取得します。</summary>
      <returns>テーブルの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>列に関する情報を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この列のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind,System.Data.Metadata.Edm.TypeUsage)">
      <summary>     クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この列のデータ型。</param>
      <param name="typeUsage">     データ型に関する追加の詳細情報。これには、最大長や null 値の許容などの詳細情報が含まれます。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>     この列のデータベースの型に対応する CLR 型の既定値を取得します。</summary>
      <returns>既定値。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>     この列のデータベースの型に対応する CLR 型を取得します。</summary>
      <returns>CLR 型。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValue">
      <summary>     この列の既定値として使用する定数値を取得または設定します。</summary>
      <returns>列の既定値。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValueSql">
      <summary>     この列の既定値として使用する SQL 式を取得または設定します。</summary>
      <returns>列の既定値。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsFixedLength">
      <summary>     この列が固定長かどうかを示す値を取得または設定します。配列データ型にのみ有効です。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>     ID パターンを使用して、データベースでこの列の値を生成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Common.DbProviderManifest)">
      <summary>     この列が別の列よりも範囲の狭いデータ型かどうかを判断します。指定した列定義をこの定義に変更することによってデータが失われるかどうかを判断するために使用されます。</summary>
      <returns>この列が範囲の狭いデータ型の場合は true。</returns>
      <param name="column">比較対象の列。</param>
      <param name="providerManifest">使用するデータベース プロバイダーの詳細情報。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>     この列に null 値を格納できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>     この列をタイムスタンプとして構成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsUnicode">
      <summary>     この列で Unicode 文字をサポートするかどうかを示す値を取得または設定します。テキスト データ型にのみ有効です。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.MaxLength">
      <summary>     この列の最大長を取得または設定します。配列データ型にのみ有効です。</summary>
      <returns>最大長。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Name">
      <summary>     列の名前を取得または設定します。</summary>
      <returns>名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Precision">
      <summary>     この列の有効桁数を取得または設定します。decimal データ型にのみ有効です。</summary>
      <returns>有効桁数。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Scale">
      <summary>     この列の小数点以下桁数を取得または設定します。decimal データ型にのみ有効です。</summary>
      <returns>小数点以下桁数。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.StoreType">
      <summary>     この列に使用するプロバイダー固有のデータ型を取得または設定します。</summary>
      <returns>データ型。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Type">
      <summary>     この列のデータ型を取得します。</summary>
      <returns>データ型。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.TypeUsage">
      <summary>     この列のデータ型に関する追加の詳細情報を取得します。これには、最大長や null 値の許容などの詳細情報が含まれます。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>データベースのインデックスの作成を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>     CreateIndexOperation クラスの新しいインスタンスを初期化します。テーブルと列のプロパティも設定する必要があります。</summary>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>     このインデックスを削除する操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>     これが一意のインデックスかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>テーブルの作成を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>     CreateTableOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">作成するテーブルの名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>     新しいテーブルに含まれる列を取得します。</summary>
      <returns>含まれる列。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>     テーブルを削除する操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>     作成するテーブルの名前を取得します。</summary>
      <returns>名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>     新しいテーブルの主キーを取得または設定します。</summary>
      <returns>主キー。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation">
      <summary>移行履歴テーブルからの新しいレコードの削除を表します。移行履歴テーブルは、データベースに適用された移行のログを格納するために使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DeleteHistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     DeleteHistoryOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">移行履歴テーブルの名前。</param>
      <param name="migrationId">削除する移行レコードの ID。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>テーブルから削除する列を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>     DropColumnOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">列を削除するテーブルの名前。</param>
      <param name="name">削除する列の名前。</param>
      <param name="inverse">削除操作を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     DropColumnOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">列を削除するテーブルの名前。</param>
      <param name="name">削除する列の名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>     列の削除を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>     削除する列の名前を取得します。</summary>
      <returns>列の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>     列を削除するテーブルの名前を取得します。</summary>
      <returns>テーブルの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>テーブルから削除する外部キー制約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>     DropForeignKeyOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="inverse">外部キー制約の削除を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>     DropForeignKeyOperation クラスの新しいインスタンスを初期化します。PrincipalTable、DependentTable、DependentColumns の各プロパティも設定する必要があります。</summary>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>     外部キー列の関連付けられたインデックスを削除する操作を取得します。</summary>
      <returns>インデックスを削除する操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>     外部キー制約の削除を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>既存のインデックスの削除を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>     DropIndexOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="inverse">インデックスの削除を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>     DropIndexOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>     インデックスの削除を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>テーブルからの主キーの削除を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     DropPrimaryKeyOperation クラスの新しいインスタンスを初期化します。テーブルと列のプロパティも設定する必要があります。</summary>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>     主キーを追加する操作を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>既存のテーブルの削除を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>     DropTableOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">削除するテーブルの名前。</param>
      <param name="inverse">テーブルの削除を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>     DropTableOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">削除するテーブルの名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>     テーブルの削除を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>     削除するテーブルの名前を取得します。</summary>
      <returns>テーブルの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>外部キー制約に影響する変更の基本クラスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>     ForeignKeyOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>     外部キー列の名前。</summary>
      <returns>列の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>     外部キー列が存在するテーブルの名前を取得または設定します。</summary>
      <returns>テーブルの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>     この外部キー制約に特定の名前が指定されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>     この外部キー制約の名前を取得または設定します。名前を指定しない場合は、既定の名前が計算されます。</summary>
      <returns>制約の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>     外部キー制約の対象となるテーブルの名前を取得または設定します。</summary>
      <returns>テーブルの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>移行履歴テーブルに影響する操作の共通基本クラスです。移行履歴テーブルは、データベースに適用された移行のログを格納するために使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     HistoryOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">移行履歴テーブルの名前。</param>
      <param name="migrationId">影響を受ける移行の名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.MigrationId">
      <summary>     影響を受ける移行の名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.Table">
      <summary>     移行履歴テーブルの名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>インデックスに影響する操作の共通基本クラスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>     IndexOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>     インデックスが付けられている列を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>     このインデックスに特定の名前が指定されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>     このインデックスの名前を取得または設定します。名前を指定しない場合は、既定の名前が計算されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>     インデックスが属するテーブルを取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation">
      <summary>移行履歴テーブルへの新しいレコードの挿入を表します。移行履歴テーブルは、データベースに適用された移行のログを格納するために使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.InsertHistoryOperation.#ctor(System.String,System.String,System.Byte[],System.Object)">
      <summary>     InsertHistoryOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">移行履歴テーブルの名前。</param>
      <param name="migrationId">挿入する移行レコードの ID。</param>
      <param name="model">モデル列に格納する値。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.IsDestructiveChange">
      <summary>{insert text here} を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.Model">
      <summary>     移行のターゲット モデルを表す、履歴テーブルに格納する値を取得します。</summary>
      <returns>
        <see cref="T:System.Byte" /> を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.ProductVersion">
      <summary>     この移行の生成に使用された Entity Framework のバージョンを示す、履歴テーブルに格納する値を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>データベース スキーマを変更する操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>     MigrationOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="anonymousArguments">       匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>     プロバイダーが処理できる追加の引数を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>     この操作を元に戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>     この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>スキーマ間でのテーブルの移動を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     MoveTableOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">移動するテーブルの名前。</param>
      <param name="newSchema">テーブルの移動先のスキーマの名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>     テーブルを元のスキーマに戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>     移動するテーブルの名前を取得します。</summary>
      <returns>名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>     テーブルの移動先のスキーマの名前を取得します。</summary>
      <returns>スキーマの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>主キーに影響する操作を表す共通基本クラスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>     PrimaryKeyOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>     主キーを構成する列を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>     この主キーに特定の名前が指定されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>     この主キーの名前を取得または設定します。名前を指定しない場合は、既定の名前が計算されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>     主キーを含むテーブルの名前を取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>既存の列の名前変更を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>     RenameColumnOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">列が属するテーブルの名前。</param>
      <param name="name">名前を変更する列の名前。</param>
      <param name="newName">列の新しい名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>     名前の変更を元に戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>     名前を変更する列の名前を取得します。</summary>
      <returns>名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>     列の新しい名前を取得します。</summary>
      <returns>新しい名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>     列が属するテーブルの名前を取得します。</summary>
      <returns>テーブルの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>  既存のテーブルの名前変更を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     RenameTableOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">名前を変更するテーブルの名前。</param>
      <param name="newName">テーブルの新しい名前。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>     名前の変更を元に戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>     名前を変更するテーブルの名前を取得します。</summary>
      <returns>名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>     テーブルの新しい名前を取得します。</summary>
      <returns>新しい名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>ターゲット データベースに対して直接実行されるプロバイダー固有の SQL ステートメントを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>     SqlOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="sql">実行する SQL。</param>
      <param name="anonymousArguments">     プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>     実行する SQL を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>     移行プロセスをトランザクション化するために使用されるトランザクション スコープ外でこのステートメントを実行するかどうかを示す値を取得または設定します。true に設定すると、移行プロセスが失敗しても、この操作はロールバックされません。</summary>
      <returns>移行が失敗しても操作がロールバックされない場合は true。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>   プロバイダーに依存しない移行操作をデータベース プロバイダー固有の SQL コマンドに変換するプロバイダーの共通の基本クラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>     一連の移行操作をデータベース プロバイダー固有の SQL に変換します。</summary>
      <returns>移行操作を実行するために実行される SQL ステートメントのリスト。</returns>
      <param name="migrationOperations">変換される操作。</param>
      <param name="providerManifestToken">対象のデータベースのバージョンを表すトークン。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>SQL ステートメントに変換された移行操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>     この移行操作を実行するために実行される SQL を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>     移行プロセスをトランザクション化するために使用されるトランザクション スコープ外でこのステートメントを実行するかどうかを示す値を取得または設定します。true に設定すると、移行プロセスが失敗しても、この操作はロールバックされません。</summary>
      <returns>移行プロセスが失敗しても操作がロールバックされない場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator">
      <summary>プロバイダーに依存しない移行操作を、Microsoft SQL Server Compact Edition に対して実行できる SQL コマンドに変換するプロバイダーを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection">
      <summary>現在のプロバイダーの空の接続を作成します。派生したプロバイダーが <see cref="T:System.Data.SqlClient.SqlConnection" /> 以外の接続を使用できるようにします。</summary>
      <returns>現在のプロバイダーの空の接続。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="alterColumnOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="dropColumnOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="dropIndexOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="moveTableOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="renameColumnOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="renameTableOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>列に設定される定数 DateTime の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>データベース スキーマを作成する SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="schema">作成するデータベース スキーマ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>テーブルをシステム テーブルとしてマークする SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="createTableOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Name(System.String)">
      <summary>引用符で囲まれた名前を生成します。提供された名前にはスキーマが含まれる場合と含まれない場合があります。</summary>
      <returns>引用符で囲まれた名前。</returns>
      <param name="name">引用符で囲む名前。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator">
      <summary>プロバイダーに依存しない移行操作を、Microsoft SQL Server に対して実行できる SQL コマンドに変換するプロバイダーを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
      <summary>列のデータ型を指定する SQL を生成します。このメソッドは、列を作成する SQL ではなく、単に実際の型を生成します。</summary>
      <returns>データ型を表す SQL。</returns>
      <param name="column">SQL が生成される列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection">
      <summary>現在のプロバイダーの空の接続を作成します。派生したプロバイダーが <see cref="T:System.Data.SqlClient.SqlConnection" /> 以外の接続を使用できるようにします。</summary>
      <returns>現在のプロバイダーの空の接続。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Boolean)">
      <summary>列に設定される定数 bool の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Byte[])">
      <summary>列に設定される定数 byte[] の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>一連の移行操作を Microsoft SQL Server 固有の SQL に変換します。</summary>
      <returns>移行操作を実行するために実行される SQL ステートメントのリスト。</returns>
      <param name="migrationOperations">変換される操作。</param>
      <param name="providerManifestToken">対象の SQL Server のバージョンを表すトークン ("2005"、"2008" など)。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="addColumnOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="addForeignKeyOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="addPrimaryKeyOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="alterColumnOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="createIndexOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="createTableOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DeleteHistoryOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="deleteHistoryOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="dropColumnOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="dropForeignKeyOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="dropIndexOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="dropPrimaryKeyOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="dropTableOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.InsertHistoryOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="insertHistoryOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="moveTableOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="renameColumnOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="renameTableOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" /> の SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="sqlOperation">SQL の生成対象の操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>列に設定される定数 geography の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>列に設定される定数 geometry の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>列に設定される定数 DateTime の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
      <summary>列に設定される定数 DateTimeOffset の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Guid)">
      <summary>列に設定される定数 Guid の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Object)">
      <summary>列に設定される定数の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.String)">
      <summary>列に設定される定数 string の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
      <summary>列に設定される定数 TimeSpan の既定値を指定する SQL を生成します。このメソッドは、既定値を設定する SQL ではなく、単に実際の値を生成します。</summary>
      <returns>既定値を表す SQL。</returns>
      <param name="defaultValue">設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>データベース スキーマを作成する SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="schema">作成されるデータベース スキーマ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>テーブルをシステム テーブルとしてマークする SQL を生成します。生成された SQL は Statement メソッドを使用して追加する必要があります。</summary>
      <param name="createTableOperation">システム テーブルとしてマークするテーブル。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Name(System.String)">
      <summary>引用符で囲まれた名前を生成します。提供された名前にはスキーマが含まれる場合と含まれない場合があります。</summary>
      <returns>生成される、引用符で囲まれた名前。</returns>
      <param name="name">引用符で囲む名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Quote(System.String)">
      <summary>SQL Server の識別子を引用符で囲みます。</summary>
      <returns>引用符で囲まれた SQL Server の識別子。</returns>
      <param name="identifier">引用符で囲む識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>データベースに対して実行される新しい Statement を追加します。</summary>
      <param name="writer">実行される SQL を格納するライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean)">
      <summary>データベースに対して実行される新しい Statement を追加します。</summary>
      <param name="sql">実行されるステートメント。</param>
      <param name="suppressTransaction">移行プロセスをトランザクション化するために使用されるトランザクション スコープ外でこのステートメントを実行するかどうかを示す値。true に設定すると、移行プロセスが失敗しても、この操作はロールバックされません。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Writer">
      <summary>SQL のビルドに使用できる新しい <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> を取得します。これはライターを作成するための単なるヘルパー メソッドです。ライターへの書き込みにより SQL が実行のために登録されることはありません。生成された SQL を Statement メソッドに渡す必要があります。</summary>
      <returns>SQL の生成に使用する空のテキスト ライター。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>T:System.CodeDom.Compiler.IndentedTextWriter と同じですが、部分信頼で動作します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>     指定したテキスト ライターと既定のタブ文字列を使用して、IndentedTextWriter クラスの新しいインスタンスを初期化します。</summary>
      <param name="writer">出力に使用する <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>     指定したテキスト ライターとタブ文字列を使用して、IndentedTextWriter クラスの新しいインスタンスを初期化します。</summary>
      <param name="writer">出力に使用する <see cref="T:System.IO.TextWriter" />。</param>
      <param name="tabString">インデント幅として使用するタブ文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>     書き込まれているドキュメントを閉じます。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>     既定のタブ文字列を指定します。このフィールドは定数です。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>     使用するテキスト ライターのエンコーディングを取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>     ストリームをフラッシュします。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>     インデント幅として適用する空白文字の数を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>     使用する <see cref="T:System.IO.TextWriter" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>     使用する改行文字を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>
        <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> プロパティに従って、各インデント レベルに対してタブ文字列を 1 回出力します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>     Boolean 値のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む Boolean 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>     文字をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む文字。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>     文字配列をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">書き込む文字配列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>     文字の部分配列をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">バッファー内の開始インデックス。</param>
      <param name="count">書き込む文字数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>     Double 値のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む Double 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>     整数のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>     8 バイトの整数のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 8 バイトの整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>     オブジェクトのテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込むオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>     Single 値のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む Single 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>     指定した文字列をテキスト ストリームに書き込みます。</summary>
      <param name="s">書き込む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>     指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込みます。</summary>
      <param name="format">書式設定文字列。</param>
      <param name="arg0">書式設定された文字列に書き込むオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>     指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込みます。</summary>
      <param name="format">使用する書式設定文字列。</param>
      <param name="arg0">書式設定された文字列に書き込む最初のオブジェクト。</param>
      <param name="arg1">書式設定された文字列に書き込む 2 番目のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>     指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込みます。</summary>
      <param name="format">使用する書式設定文字列。</param>
      <param name="arg">出力する引数配列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>     行終端記号を書き込みます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>     Boolean 値のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む Boolean 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>     文字をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む文字。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>     文字配列をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="buffer">書き込む文字配列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>     文字の部分配列をテキスト ストリームに書き込み、続けて行終端記号書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">バッファー内の開始インデックス。</param>
      <param name="count">書き込む文字数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>     Double 値のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む Double 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>     整数のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>     8 バイト整数のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む 8 バイトの整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>     オブジェクトのテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込むオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>     Single 値のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む Single 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>     指定した文字列をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="s">書き込む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>     指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">書式設定文字列。</param>
      <param name="arg0">書式設定された文字列に書き込むオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>     指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">使用する書式設定文字列。</param>
      <param name="arg0">書式設定された文字列に書き込む最初のオブジェクト。</param>
      <param name="arg1">書式設定された文字列に書き込む 2 番目のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>     指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">使用する書式設定文字列。</param>
      <param name="arg">出力する引数配列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>     UInt32 のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">出力する UInt32。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>     タブが適用されていない行に、指定した文字列を書き込みます。</summary>
      <param name="s">書き込む文字列。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary> モデル内の複合型に対して構成を実行できます。<see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> は <see cref="M:System.Data.Entity.DbModelBuilder.ComplexType``1" /> メソッドを使用して取得できます。また、<see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> から派生したカスタム型は <see cref="P:System.Data.Entity.DbModelBuilder.Configurations" /> プロパティを使用して登録できます。</summary>
      <typeparam name="TComplexType">構成する複合型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>モデル内のエンティティ型に対して構成を実行できます。<see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> は <see cref="T:System.Data.Entity.DbModelBuilder" /> の Entity メソッドを使用して取得できます。また、<see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> から派生したカスタム型は <see cref="T:System.Data.Entity.DbModelBuilder" /> の Configurations プロパティを使用して登録できます。</summary>
      <typeparam name="TEntityType">エンティティ型を表します。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary> このエンティティ型に使用するエンティティ セット名を構成します。エンティティ セット名は、各セットの基本型に対してのみ構成できます。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> インスタンス。</returns>
      <param name="entitySetName">エンティティ セットの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> このエンティティ型の主キー プロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> インスタンス。</returns>
      <param name="keyExpression"> 主キーとして使用するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.Id    、Visual Basic .NET では Function(t) t.Id です。主キーが複数のプロパティで構成される場合は、それらのプロパティを含む匿名型を指定します。たとえば、C# では t =&gt; new { t.Id1, t.Id2 }、Visual Basic .NET では Function(t) New From { t.Id1, t.Id2 } です。</param>
      <typeparam name="TKey">キーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary> このエンティティ型から多リレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
      <typeparam name="TTargetEntity">リレーションシップのもう一方の端のエンティティの型です。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> このエンティティ型から省略可能リレーションシップを構成します。エンティティ型のインスタンスは、このリレーションシップを指定しなくてもデータベースに保存できます。データベースの外部キーは Null 許容になります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
      <typeparam name="TTargetEntity">リレーションシップのもう一方の端のエンティティの型です。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> このエンティティ型から必須リレーションシップを構成します。エンティティ型のインスタンスは、このリレーションシップを指定しないとデータベースに保存できません。データベースの外部キーは Null 非許容になります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
      <typeparam name="TTargetEntity">リレーションシップのもう一方の端のエンティティの型です。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary> 派生エンティティ型をデータベース スキーマにマップする方法に関する詳細構成を可能にします。このメソッドの呼び出しは追加的で、後続の呼び出しがこのメソッドの前の呼び出しで既に実行された構成をオーバーライドすることはありません。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> インスタンス。</returns>
      <param name="derivedTypeMapConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> に対して構成を実行するアクション。</param>
      <typeparam name="TDerived">構成する派生エンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary> このエンティティ型をデータベース スキーマにマップする方法に関する詳細構成を可能にします。既定では、このエンティティ型から派生したすべての型にすべての構成が適用されます。派生型は、派生型を構成するこのメソッドの特定のオーバーロードを使用するか、派生型の <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> を使用して構成できます。エンティティのプロパティを複数のテーブル間で分割するには、このメソッドの呼び出しを複数使用します。呼び出しは追加的で、後続の呼び出しがこのメソッドの前の呼び出しで既に実行された構成をオーバーライドすることはありません。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> インスタンス。</returns>
      <param name="entityMappingConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> に対して構成を実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>このエンティティ型のマップ先となるテーブル名を構成します。</summary>
      <param name="tableName">テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary> このエンティティ型のマップ先となるテーブル名を構成します。</summary>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのデータベース スキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary> モデルの作成時、無効なモデルが生成されたときに <see cref="T:System.Data.Entity.DbModelBuilder" /> によってスローされる例外。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化情報。</param>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary> リレーションシップの構成を実行するための基本クラス。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary> エンティティ型または複合型の <see cref="T:System.byte[]" /> プロパティを構成するために使用します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary> プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary> プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ BinaryPropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">     データベースでプロパティの値を生成するために使用するパターン。null に設定すると、データベースで生成された pattern ファセットがプロパティから削除されます。null に設定した場合、ランタイムの動作は None を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> 指定した最大長を使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
      <param name="value"> プロパティの最大長。null に設定すると、最大長の制限がプロパティから削除されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary> オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
      <param name="concurrencyToken"> プロパティが同時実行トークンかどうかを示す値。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary> プロパティを固定長として構成します。HasMaxLength を使用してプロパティの固定の長さを設定します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary> データベース プロバイダーでサポートされる最大長を許容するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary> プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。既定では、<see cref="T:System.byte[]" /> プロパティは省略可能です。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary> プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary> プロパティをデータベースの行バージョンとして構成します。実際のデータ型は使用されているデータベース プロバイダーによって異なります。プロパティを行バージョンとして設定すると、そのプロパティは自動的にオプティミスティック同時実行トークンとして構成されます。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary> プロパティを可変長として構成します。既定では、<see cref="T:System.byte[]" /> プロパティは可変長です。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary> 連鎖削除機能をサポートするリレーションシップを構成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary> リレーションシップで連鎖削除が有効になるように構成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary> リレーションシップで連鎖削除が有効かどうかを構成します。</summary>
      <param name="value">連鎖削除が有効である場合は true、それ以外の場合は false。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary> エンティティおよび複合型の派生構成クラスを <see cref="T:System.Data.Entity.DbModelBuilder" /> に登録するために使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> を <see cref="T:System.Data.Entity.DbModelBuilder" /> に追加します。<see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> はモデルの型ごとに 1 つだけ追加できます。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> インスタンス。</returns>
      <param name="complexTypeConfiguration">追加する複合型の構成。</param>
      <typeparam name="TComplexType">構成対象の複合型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> を <see cref="T:System.Data.Entity.DbModelBuilder" /> に追加します。<see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> はモデルの型ごとに 1 つだけ追加できます。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> インスタンス。</returns>
      <param name="entityTypeConfiguration">追加するエンティティ型の構成。</param>
      <typeparam name="TEntityType">構成対象のエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> インスタンスで使用される規約をカスタマイズできます。現在サポートされている操作は、1 つ以上の既定の規約の削除のみです。既定の規約は <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" /> 名前空間にあります。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> の規約を無効にします。削除可能な既定の規約は <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" /> 名前空間にあります。</summary>
      <typeparam name="TConvention">無効にする規約の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary> エンティティ型または複合型の <see cref="T:System.DateTime" /> プロパティを構成するために使用します。この構成機能は Code First Fluent API で公開されます。詳細については、<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary> プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary> プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ DateTimePropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">     データベースでプロパティの値を生成するために使用するパターン。null に設定すると、データベースで生成された pattern ファセットがプロパティから削除されます。null に設定した場合、ランタイムの動作は None を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary> プロパティの有効桁数を構成します。データベース プロバイダーが列のデータ型の有効桁数をサポートしていない場合、この値は無視されます。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> インスタンス。</returns>
      <param name="value">プロパティの有効桁数。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary> オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> インスタンス。</returns>
      <param name="concurrencyToken"> プロパティが同時実行トークンかどうかを示す値。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary> プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary> プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。既定では、<see cref="T:System.DateTime" /> プロパティは必須です。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary> エンティティ型または複合型の <see cref="T:System.decimal" /> プロパティを構成するために使用します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary> プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary> プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ DecimalPropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">     データベースでプロパティの値を生成するために使用するパターン。null に設定すると、データベースで生成された pattern ファセットがプロパティから削除されます。null に設定した場合、ランタイムの動作は None を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary> プロパティの有効桁数と小数点以下桁数を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> インスタンス。</returns>
      <param name="precision">プロパティの有効桁数。</param>
      <param name="scale">プロパティの小数点以下桁数。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary> オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> インスタンス。</returns>
      <param name="concurrencyToken"> プロパティが同時実行トークンかどうかを示す値。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary> プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary> プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。既定では、<see cref="T:System.decimal" /> プロパティは必須です。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary> オブジェクト モデルで公開される外部キー プロパティをサポートするリレーションシップを構成します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
      <typeparam name="TDependentEntityType">依存エンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> オブジェクト モデルで公開される外部キー プロパティを使用するリレーションシップを構成します。外部キー プロパティがオブジェクト モデルで公開されない場合は、Map メソッドを使用します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="foreignKeyExpression">外部キーとして使用するプロパティを表すラムダ式。外部キーが複数のプロパティで構成される場合は、それらのプロパティを含む匿名型を指定します。複数の外部キー プロパティを使用する場合、プロパティは、プリンシパル エンティティ型に対して主キー プロパティが構成された順序と同じ順序で指定する必要があります。</param>
      <typeparam name="TKey">キーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary> エンティティ型またはエンティティ型のプロパティ サブセットに対応するテーブルと列のマッピングを構成します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
      <typeparam name="TEntityType">マップするエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary> 基本型から継承されたすべてのプロパティを再マップします。別のテーブルにマップされるように派生型を構成すると、非継承プロパティだけでなく、すべてのプロパティがそのテーブルに含められます。これは TPC (table-per-concrete type) マッピングと呼ばれます。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> このマッピング フラグメントに含まれるプロパティを構成します。このメソッドを呼び出さない場合、マッピング フラグメントにまだ含まれていないすべてのプロパティが構成されます。</summary>
      <param name="propertiesExpression"> マップされるプロパティを含む匿名型に対するラムダ式。</param>
      <typeparam name="TObject">マップされるプロパティを含む匿名型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 継承階層内の型を区別するための識別子条件を構成します。</summary>
      <returns>識別子条件をさらに構成するための構成オブジェクト。</returns>
      <param name="property"> 型の区別に使用されるプロパティを表すラムダ式。</param>
      <typeparam name="TProperty">型の区別に使用されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary> 継承階層内で型を区別するための識別子列を構成します。</summary>
      <returns>識別子列と値をさらに構成するための構成オブジェクト。</returns>
      <param name="discriminator">識別子列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary> マップ先のテーブル名を構成します。</summary>
      <param name="tableName">テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary> マップ先のテーブルの名前とスキーマを構成します。</summary>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのスキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>外部キーの関連付けのマッピング構成を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>指定した <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> オブジェクトが現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="other">比較相手の <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />。これと現在のオブジェクトを比較することになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary> 外部キーの列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> インスタンス。</returns>
      <param name="keyColumnNames"> 外部キー列の名前。複数の外部キー プロパティを使用する場合、プロパティは、ターゲット エンティティ型に対して主キー プロパティが構成された順序と同じ順序で指定する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>外部キー列を配置するテーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> インスタンス。</returns>
      <param name="tableName">構成するテーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>外部キー列を配置するテーブルの名前とスキーマを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのスキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>オブジェクト モデルで公開されない外部キー プロパティのみをサポートするリレーションシップを構成します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>オブジェクト モデルで公開されない外部キー プロパティを使用するリレーションシップを構成します。列とテーブルは、構成アクションを指定してカスタマイズできます。空の構成アクションを指定すると、規約によって列名が生成されます。外部キー プロパティがオブジェクト モデルで公開される場合は、HasForeignKey メソッドを使用します。一部のリレーションシップは、オブジェクト モデルでの外部キー プロパティの公開をサポートしていません。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="configurationAction">外部キーの列とテーブルを構成するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary> エンティティ型または複合型の、length ファセットを持つ列を構成するために使用します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> 指定した最大長を使用するように列を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> インスタンス。</returns>
      <param name="value"> 列の最大長。値を null に設定すると、列から最大長の制限が削除され、データベース列には既定の長さが使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>列を固定長として構成します。</summary>
      <returns>列が固定長の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary> データベース プロバイダーでサポートされる最大長を許容するように列を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary> 列を可変長として構成します。</summary>
      <returns>列が可変長の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary> エンティティ型または複合型の、length ファセットを持つプロパティを構成するために使用します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> 指定した最大長を使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> インスタンス。</returns>
      <param name="value"> プロパティの最大長。値を null に設定すると、プロパティから最大長の制限が削除され、データベース列には既定の長さが使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary> プロパティを固定長として構成します。HasMaxLength を使用してプロパティの固定の長さを設定します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary> データベース プロバイダーでサポートされる最大長を許容するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary> プロパティを可変長として構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary> エンティティ型から "多" リレーションシップを構成します。</summary>
      <typeparam name="TEntityType">リレーションシップの起点であるエンティティ型。</typeparam>
      <typeparam name="TTargetEntityType">リレーションシップのターゲットであるエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに多対多となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して多対多となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに "多対省略可能" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して "多対省略可能" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに "多対必須" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して "多対必須" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary> 多対多のリレーションシップのテーブルと列のマッピングを構成します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>指定した <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" /> オブジェクトが現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="other">
        <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary> 左外部キーの列の名前を構成します。左外部キーは、<see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> での HasMany の呼び出しで指定されるナビゲーション プロパティを表します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> インスタンス。</returns>
      <param name="keyColumnNames"> 外部キー列の名前。複数の外部キー プロパティを使用する場合、プロパティは、ターゲット エンティティ型に対して主キー プロパティが構成された順序と同じ順序で指定する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary> 右外部キーの列の名前を構成します。右外部キーは、WithMany 呼び出しで指定されるナビゲーション プロパティを表します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> インスタンス。</returns>
      <param name="keyColumnNames"> 外部キー列の名前。複数の外部キー プロパティを使用する場合、プロパティは、ターゲット エンティティ型に対して主キー プロパティが構成された順序と同じ順序で指定する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary> リレーションシップの結合テーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary> リレーションシップの結合テーブルの名前とスキーマを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのスキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration">
      <summary> 多対多のリレーションシップを構成します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary> リレーションシップの格納に使用する外部キーの列とテーブルを構成します。</summary>
      <param name="configurationAction">外部キーの列とテーブルを構成するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary> プロパティに割り当てられた値に基づいて継承階層内の型を判別するための条件を構成します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary> プロパティの値を要求するように条件を構成します。このプロパティを格納する列に値が割り当てられていない行は、このエンティティ型の基本型と見なされます。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>エンティティ型から省略可能リレーションシップを構成します。</summary>
      <typeparam name="TEntityType">リレーションシップの起点であるエンティティ型。</typeparam>
      <typeparam name="TTargetEntityType">リレーションシップのターゲットであるエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに省略可能対多となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して省略可能対多となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに省略可能対省略可能となるようにリレーションシップを構成します。構成されているエンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。リレーションシップのターゲット エンティティ型は、リレーションシップのプリンシパルになります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して省略可能対省略可能となるようにリレーションシップを構成します。構成されているエンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。リレーションシップのターゲット エンティティ型は、リレーションシップのプリンシパルになります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに省略可能対省略可能となるようにリレーションシップを構成します。構成されているエンティティ型は、リレーションシップのプリンシパルになります。リレーションシップのターゲット エンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して省略可能対省略可能となるようにリレーションシップを構成します。構成されているエンティティ型は、リレーションシップのプリンシパルになります。リレーションシップのターゲット エンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに、リレーションシップの指定した End が必須となるように構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して、リレーションシップの指定した End が必須となるように構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>エンティティ型のプリミティブ列を構成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> プロパティの格納に使用するプリミティブ列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary> プロパティの格納に使用するプリミティブ列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>プリミティブ列を省略可能として構成します。</summary>
      <returns>列が省略可能である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>プリミティブ列を必須として構成します。</summary>
      <returns>列が必須である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary> エンティティ型または複合型のプリミティブ プロパティを構成するために使用します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary> プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary> プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ PrimitivePropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">     データベースでプロパティの値を生成するために使用するパターン。null に設定すると、データベースで生成された pattern ファセットがプロパティから削除されます。null に設定した場合、ランタイムの動作は None を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary> オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="concurrencyToken"> プロパティが同時実行トークンかどうかを示す値。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary> プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary> プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary> エンティティ型からの必須リレーションシップを構成します。</summary>
      <typeparam name="TEntityType">リレーションシップの起点であるエンティティ型。</typeparam>
      <typeparam name="TTargetEntityType">リレーションシップのターゲットであるエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに "必須対多" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して "必須対多" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに必須対省略可能となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して必須対省略可能となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに必須対必須となるようにリレーションシップを構成します。構成されているエンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。リレーションシップのターゲット エンティティ型は、リレーションシップのプリンシパルになります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して必須対必須となるようにリレーションシップを構成します。構成されているエンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。リレーションシップのターゲットであるエンティティ型は、リレーションシップのプリンシパルになります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに必須対必須となるようにリレーションシップを構成します。構成されているエンティティ型は、リレーションシップのプリンシパルになります。リレーションシップのターゲット エンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> リレーションシップのもう一方の側のナビゲーション プロパティを使用して必須対必須となるようにリレーションシップを構成します。構成されているエンティティ型は、リレーションシップのプリンシパルになります。リレーションシップのターゲット エンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression"> リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary> 文字列値の格納に使用するデータベース列を構成します。この構成機能は Code First Fluent API で公開されます。詳細については、<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> データベース列の順序を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary> データベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>指定した最大長を使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
      <param name="value">プロパティの最大長。値を null に設定すると、列には既定の長さが使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary> 列を固定長として構成します。HasMaxLength を使用してプロパティの固定の長さを設定します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary> データベース プロバイダーでサポートされる最大長を許容するように列を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary> 列を省略可能として構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary> 列を必須として構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>Unicode 文字列コンテンツをサポートするように列を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary> Unicode 文字列コンテンツを列でサポートするかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
      <param name="unicode"> Unicode 文字列コンテンツを列でサポートするかどうかを示す値。null を指定すると、Unicode ファセットが列から削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary> 列を可変長として構成します。既定では、列は可変長です。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>エンティティ型または複合型の <see cref="T:System.string" /> プロパティを構成するために使用します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary> プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ StringPropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">     データベースでプロパティの値を生成するために使用するパターン。null に設定すると、データベースで生成された pattern ファセットがプロパティから削除されます。null に設定した場合、ランタイムの動作は None を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>指定した最大長を使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
      <param name="value">プロパティの最大長。このプロパティを null に設定すると、プロパティから最大長の制限が取り除かれ、データベース列には既定の長さが使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary> オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
      <param name="concurrencyToken"> プロパティが同時実行トークンかどうかを指定します。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>プロパティを固定長として構成します。HasMaxLength を使用してプロパティの固定の長さを設定します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>データベース プロバイダーでサポートされる最大長を許容するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。既定では、<see cref="T:System.string" /> プロパティは省略可能です。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary> プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Unicode 文字列コンテンツをサポートするようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Unicode 文字列コンテンツをプロパティでサポートするかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
      <param name="unicode"> Unicode 文字列コンテンツをプロパティでサポートするかどうかを示す値。null を指定すると、Unicode ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>プロパティを可変長として構成します。既定では、<see cref="T:System.string" /> プロパティは可変長です。</summary>
      <returns>複数の呼び出しを連結できるようにするための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>モデル内の特定の型に対して構成を実行するために使用します。</summary>
      <typeparam name="TStructuralType">構成する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> モデルからプロパティを除外して、データベースにマップされないようにします。</summary>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
      <typeparam name="TProperty">無視するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary> この型に対して定義される <see cref="T:System.byte[]" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeography}})">
      <summary>   この型に対して定義される <see cref="T:DbGeography" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">   構成するプロパティを表すラムダ式。C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeometry}})">
      <summary>   この型に対して定義される <see cref="T:DbGeometry" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">   構成するプロパティを表すラムダ式。C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary> この型に対して定義される <see cref="T:System.DateTime" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary> この型に対して定義される <see cref="T:System.DateTimeOffset" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary> この型に対して定義される <see cref="T:System.decimal" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary> この型に対して定義される NULL を許容する (<see cref="T:System.DateTime" />) プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary> この型に対して定義される NULL を許容する (<see cref="T:System.DateTimeOffset" />) プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary> この型に対して定義される NULL を許容する (<see cref="T:System.Decimal" />) プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary> この型に対して定義される NULL を許容する (<see cref="T:System.TimeSpan" />) プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary> この型に対して定義される NULL を許容する (<see cref="T:System.struct" />) プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
      <typeparam name="T">構成されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary> この型に対して定義される <see cref="T:System.string" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary> この型に対して定義される <see cref="T:System.TimeSpan" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> この型に対して定義される <see cref="T:System.struct" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression"> 構成するプロパティを表すラムダ式。たとえば、C# では t =&gt; t.MyProperty、Visual Basic .NET では Function(t) t.MyProperty です。</param>
      <typeparam name="T">構成されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary> 継承階層内の型を区別するための識別子列を構成します。この構成機能は Code First Fluent API で公開されます。詳細については、<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>オブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>継承階層内の他の型から構成対象のエンティティ型を識別するための識別子の値を構成します。</summary>
      <returns>識別子の値の格納に使用する列を構成するための構成オブジェクト。</returns>
      <param name="value">エンティティ型の識別に使用する値。</param>
      <typeparam name="T">識別子の値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>継承階層内の他の型から構成対象のエンティティ型を識別するための識別子の値を構成します。</summary>
      <returns>識別子の値の格納に使用する列を構成するための構成オブジェクト。</returns>
      <param name="value">エンティティ型の識別に使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary> 継承階層内の他の型から構成対象のエンティティ型を識別するための識別子の値を構成します。</summary>
      <returns>識別子の値の格納に使用する列を構成するための構成オブジェクト。</returns>
      <param name="value">エンティティ型の識別に使用する値。</param>
      <typeparam name="T">識別子の値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。このメソッドは IntelliSense では表示されません。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>関連する型の間にナビゲーション プロパティが 1 組しか存在しない場合に相互に逆になるナビゲーション プロパティを検出する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnTypeCasingConvention">
      <summary> データ注釈または <see cref="T:System.Data.Entity.DbModelBuilder" /> API を使用して、明示的に指定されたデータ型を小文字に変換する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>モデル内の型で検出された <see cref="T:System.ComponentModel.DataAnnotations.ComplexTypeAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>主キー、マップされた基本型、およびナビゲーション プロパティがない場合に型を複合型として構成する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary> モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>10 進数型のプロパティの有効桁数を 18 に、小数点以下桁数を 2 に設定する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>最初に出現するように主キー プロパティを移動する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>外部キー プロパティの CLR の Null 値許容に基づいて省略可能リレーションシップと必須リレーションシップを区別する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>モデル内のナビゲーション プロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>モデル内の外部キー プロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> インスタンスから削除できる規約を識別します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>主キー プロパティを検出する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.InversePropertyAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>多対多のリレーションシップに含まれる両方のテーブルから結合テーブルに連鎖削除を追加する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>継承プロパティをマッピングすることで無効なまたはサポートされないマッピングが作成されないようにします。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>名前が依存ナビゲーション プロパティ名とプリンシパル型主キー プロパティ名の組み合わせである外部キー プロパティを検出する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>モデル内の型で検出された <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>必須リレーションシップに対して連鎖削除を有効にする規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>依存エンティティ型の主キーを一対一のリレーションシップの外部キーとして構成する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>エンティティ セット名をエンティティ型名の複数化バージョンに設定する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>テーブル名をエンティティ型名の複数化バージョンに設定する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>名前がプリンシパル型主キー プロパティ名と一致する外部キー プロパティを検出する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>length ファセットをサポートするプロパティの種類の既定の最大長を設定する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>モデル内のナビゲーション プロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>モデル内のプリミティブ プロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>SqlCe がプロバイダーの場合、型が length ファセットをサポートするプロパティの既定の最大長 4000 を設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>整数の主キーを ID として構成する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>モデル内の型で検出された <see cref="T:System.ComponentModel.DataAnnotations.TableAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>名前がプリンシパル型名とプリンシパル型主キー プロパティ名の組み合わせである外部キー プロパティを検出する規約。</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>エンティティの検証に失敗したときに <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> からスローされる例外。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="entityValidationResults">検証結果。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="entityValidationResults">検証結果。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>検証エラーを返します。</summary>
      <returns>検証エラー (存在する場合)。</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>単一のエンティティの検証結果を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> クラスのインスタンスを作成します。</summary>
      <param name="entry">結果が適用されるエンティティ エントリ。null になることはありません。</param>
      <param name="validationErrors">
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> インスタンスのリスト。null になることはありませんが、空になることはあります。空の場合、エンティティが有効であることを意味します。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>結果が適用される <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> のインスタンスを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>エンティティが有効かどうかのインジケーターを取得します。</summary>
      <returns>エンティティが有効な場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>検証エラーを取得します。このプロパティが null になることはありません。</summary>
      <returns>検証エラー。</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>検証コードから例外がスローされるときに <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> からスローされる例外。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とコンテキストを使用して、<see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化情報。</param>
      <param name="context">ストリーム コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>検証エラー。エンティティ レベルの検証エラーか、プロパティ レベルの検証エラーです。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> のインスタンスを作成します。</summary>
      <param name="propertyName">無効なプロパティの名前。null を使用できます。</param>
      <param name="errorMessage">検証エラー メッセージ。null を使用できます。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>検証エラー メッセージを取得します。</summary>
      <returns>検証エラー メッセージ。</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>無効なプロパティの名前を取得します。</summary>
      <returns>無効なプロパティの名前。</returns>
    </member>
  </members>
</doc>